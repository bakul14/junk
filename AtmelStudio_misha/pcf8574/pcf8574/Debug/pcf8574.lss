
pcf8574.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000132  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000bd  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000083  00000000  00000000  00000247  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000c2  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000120  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003c  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	3d c0       	rjmp	.+122    	; 0x88 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	3a c0       	rjmp	.+116    	; 0xba <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
volatile uint8_t i = 0;
int main(void)
{
	TCCR1A = 0b10000000;
  48:	20 e8       	ldi	r18, 0x80	; 128
  4a:	2f bd       	out	0x2f, r18	; 47
	TCCR1B = 0b00001100; //256
  4c:	8c e0       	ldi	r24, 0x0C	; 12
  4e:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 0b00010000;
  50:	80 e1       	ldi	r24, 0x10	; 16
  52:	89 bf       	out	0x39, r24	; 57
	OCR1A = 31249;
  54:	81 e1       	ldi	r24, 0x11	; 17
  56:	9a e7       	ldi	r25, 0x7A	; 122
  58:	9b bd       	out	0x2b, r25	; 43
  5a:	8a bd       	out	0x2a, r24	; 42
	GICR = 1<<7;
  5c:	2b bf       	out	0x3b, r18	; 59

	
	TWBR = 18;
  5e:	82 e1       	ldi	r24, 0x12	; 18
  60:	80 b9       	out	0x00, r24	; 0
	TWSR = 0b00000001;
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	81 b9       	out	0x01, r24	; 1
	
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  66:	84 ea       	ldi	r24, 0xA4	; 164
  68:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  6a:	06 b6       	in	r0, 0x36	; 54
  6c:	07 fe       	sbrs	r0, 7
  6e:	fd cf       	rjmp	.-6      	; 0x6a <main+0x22>
	
	
	TWDR = 0b01001110;
  70:	8e e4       	ldi	r24, 0x4E	; 78
  72:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  74:	84 e8       	ldi	r24, 0x84	; 132
  76:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  78:	06 b6       	in	r0, 0x36	; 54
  7a:	07 fe       	sbrs	r0, 7
  7c:	fd cf       	rjmp	.-6      	; 0x78 <main+0x30>
	//    while (!(TWCR & (1<<TWINT)));
	//    _delay_ms(500);
	//    }
	
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  7e:	84 e9       	ldi	r24, 0x94	; 148
  80:	86 bf       	out	0x36, r24	; 54

}
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	08 95       	ret

00000088 <__vector_6>:
ISR(TIMER1_COMPA_vect) {
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	8f 93       	push	r24

	TWDR = i;
  94:	80 91 60 00 	lds	r24, 0x0060
  98:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  9a:	84 e8       	ldi	r24, 0x84	; 132
  9c:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1<<TWINT)));
  9e:	06 b6       	in	r0, 0x36	; 54
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <__vector_6+0x16>
	i--;
  a4:	80 91 60 00 	lds	r24, 0x0060
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	80 93 60 00 	sts	0x0060, r24

  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
