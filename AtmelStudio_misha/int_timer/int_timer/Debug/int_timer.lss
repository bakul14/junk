
int_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000188  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000678  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000563  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c3  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ff  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013b  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	40 c0       	rjmp	.+128    	; 0x92 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	65 c0       	rjmp	.+202    	; 0x110 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include <avr/interrupt.h>

int a = 0;
int main(void)
{
	DDRD = 0xff;
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	81 bb       	out	0x11, r24	; 17
    SREG |= (1<<7);
  4c:	8f b7       	in	r24, 0x3f	; 63
  4e:	80 68       	ori	r24, 0x80	; 128
  50:	8f bf       	out	0x3f, r24	; 63
	TIMSK |= (1<<2);
  52:	89 b7       	in	r24, 0x39	; 57
  54:	84 60       	ori	r24, 0x04	; 4
  56:	89 bf       	out	0x39, r24	; 57
	TIFR |= (1<<2);
  58:	88 b7       	in	r24, 0x38	; 56
  5a:	84 60       	ori	r24, 0x04	; 4
  5c:	88 bf       	out	0x38, r24	; 56
	TCCR1B = 0b00000101;
  5e:	85 e0       	ldi	r24, 0x05	; 5
  60:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
  62:	1d bc       	out	0x2d, r1	; 45
  64:	1c bc       	out	0x2c, r1	; 44
    while (1) 
    {
	PORTD = 0xff;
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6a:	2f ef       	ldi	r18, 0xFF	; 255
  6c:	33 ed       	ldi	r19, 0xD3	; 211
  6e:	90 e3       	ldi	r25, 0x30	; 48
  70:	21 50       	subi	r18, 0x01	; 1
  72:	30 40       	sbci	r19, 0x00	; 0
  74:	90 40       	sbci	r25, 0x00	; 0
  76:	e1 f7       	brne	.-8      	; 0x70 <main+0x28>
  78:	00 c0       	rjmp	.+0      	; 0x7a <main+0x32>
  7a:	00 00       	nop
	_delay_ms(1000);
	PORTD = 0x00;
  7c:	12 ba       	out	0x12, r1	; 18
  7e:	2f ef       	ldi	r18, 0xFF	; 255
  80:	33 ed       	ldi	r19, 0xD3	; 211
  82:	90 e3       	ldi	r25, 0x30	; 48
  84:	21 50       	subi	r18, 0x01	; 1
  86:	30 40       	sbci	r19, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x3c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x46>
  8e:	00 00       	nop
  90:	eb cf       	rjmp	.-42     	; 0x68 <main+0x20>

00000092 <__vector_8>:
	_delay_ms(1000);		
    }
}
ISR (TIMER1_OVF_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	TCCR1B = 0;
  a4:	1e bc       	out	0x2e, r1	; 46
	while(a<10) {
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  aa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ae:	0a 97       	sbiw	r24, 0x0a	; 10
  b0:	04 f5       	brge	.+64     	; 0xf2 <__vector_8+0x60>
	PORTD = 0xff;
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	22 bb       	out	0x12, r18	; 18
  b6:	3f ef       	ldi	r19, 0xFF	; 255
  b8:	80 e7       	ldi	r24, 0x70	; 112
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	31 50       	subi	r19, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <__vector_8+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <__vector_8+0x34>
  c6:	00 00       	nop
	_delay_ms(50);
	PORTD = 0;
  c8:	12 ba       	out	0x12, r1	; 18
  ca:	3f ef       	ldi	r19, 0xFF	; 255
  cc:	80 e7       	ldi	r24, 0x70	; 112
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	31 50       	subi	r19, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__vector_8+0x3e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <__vector_8+0x48>
  da:	00 00       	nop
	_delay_ms(50);
	a++;
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	_delay_ms(1000);		
    }
}
ISR (TIMER1_OVF_vect) {
	TCCR1B = 0;
	while(a<10) {
  ee:	0a 97       	sbiw	r24, 0x0a	; 10
  f0:	0c f3       	brlt	.-62     	; 0xb4 <__vector_8+0x22>
	_delay_ms(50);
	PORTD = 0;
	_delay_ms(50);
	a++;
	}
	a = 0;
  f2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  f6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	TCCR1B = 0b00000101;
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	8e bd       	out	0x2e, r24	; 46
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
