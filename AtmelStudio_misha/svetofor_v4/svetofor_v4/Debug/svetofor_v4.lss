
svetofor_v4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005df  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c4  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a8  00000000  00000000  00000cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ec  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 36       	cpi	r26, 0x6A	; 106
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	84 c0       	rjmp	.+264    	; 0x14e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
uint8_t timerc = 0;

#define sec 2
int main(void)
{
    TCCR1B = 0b00000101;
  48:	85 e0       	ldi	r24, 0x05	; 5
  4a:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
  4c:	1d bc       	out	0x2d, r1	; 45
  4e:	1c bc       	out	0x2c, r1	; 44
	TCCR0 = 0b00000100;
  50:	84 e0       	ldi	r24, 0x04	; 4
  52:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  54:	12 be       	out	0x32, r1	; 50
	DDRB |= (0<<0) | (0<<1) | (0<<2); // вход сигналов с приемника
  56:	87 b3       	in	r24, 0x17	; 23
  58:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<5) | (1<<6) | (1<<7); // выход сигнала на светофор
  5a:	81 b3       	in	r24, 0x11	; 17
  5c:	80 6e       	ori	r24, 0xE0	; 224
  5e:	81 bb       	out	0x11, r24	; 17
	while (1) {
		// -------------------------------------
		if (PINB &= (1<<0)) {
			if (a == 0) {
				a1 = TCNT0;
				a = 1;
  60:	31 e0       	ldi	r19, 0x01	; 1
	DDRB |= (0<<0) | (0<<1) | (0<<2); // вход сигналов с приемника
	DDRD |= (1<<5) | (1<<6) | (1<<7); // выход сигнала на светофор
	
	while (1) {
		// -------------------------------------
		if (PINB &= (1<<0)) {
  62:	86 b3       	in	r24, 0x16	; 22
  64:	81 70       	andi	r24, 0x01	; 1
  66:	86 bb       	out	0x16, r24	; 22
  68:	88 23       	and	r24, r24
  6a:	51 f0       	breq	.+20     	; 0x80 <main+0x38>
			if (a == 0) {
  6c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <a>
  70:	81 11       	cpse	r24, r1
  72:	12 c0       	rjmp	.+36     	; 0x98 <main+0x50>
				a1 = TCNT0;
  74:	82 b7       	in	r24, 0x32	; 50
  76:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <a1>
				a = 1;
  7a:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <a>
  7e:	0c c0       	rjmp	.+24     	; 0x98 <main+0x50>
			}
		}
		else if (a==1) {
  80:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <a>
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	41 f4       	brne	.+16     	; 0x98 <main+0x50>
			a = 0;
  88:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <a>
			timera = TCNT0 - a1;
  8c:	82 b7       	in	r24, 0x32	; 50
  8e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <a1>
  92:	89 1b       	sub	r24, r25
  94:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <timera>
		}
		// -------------------------------------
		if (PINB &= (1<<1)) {
  98:	86 b3       	in	r24, 0x16	; 22
  9a:	82 70       	andi	r24, 0x02	; 2
  9c:	86 bb       	out	0x16, r24	; 22
  9e:	88 23       	and	r24, r24
  a0:	51 f0       	breq	.+20     	; 0xb6 <main+0x6e>
			if (b == 0) {
  a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <b>
  a6:	81 11       	cpse	r24, r1
  a8:	12 c0       	rjmp	.+36     	; 0xce <main+0x86>
				b1 = TCNT0;
  aa:	82 b7       	in	r24, 0x32	; 50
  ac:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <b1>
				b = 1;
  b0:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <b>
  b4:	0c c0       	rjmp	.+24     	; 0xce <main+0x86>
			}
		}
		else if (b==1) {
  b6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <b>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	41 f4       	brne	.+16     	; 0xce <main+0x86>
			b = 0;
  be:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <b>
			timerb = TCNT0 - b1;
  c2:	82 b7       	in	r24, 0x32	; 50
  c4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <b1>
  c8:	89 1b       	sub	r24, r25
  ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timerb>
		}
		// -------------------------------------
		if (PINB &= (1<<2)) {
  ce:	86 b3       	in	r24, 0x16	; 22
  d0:	84 70       	andi	r24, 0x04	; 4
  d2:	86 bb       	out	0x16, r24	; 22
  d4:	88 23       	and	r24, r24
  d6:	51 f0       	breq	.+20     	; 0xec <main+0xa4>
			if (c == 0) {
  d8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <c>
  dc:	81 11       	cpse	r24, r1
  de:	12 c0       	rjmp	.+36     	; 0x104 <main+0xbc>
				c1 = TCNT0;
  e0:	82 b7       	in	r24, 0x32	; 50
  e2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <c1>
				c = 1;
  e6:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <c>
  ea:	0c c0       	rjmp	.+24     	; 0x104 <main+0xbc>
			}
		}
		else if (c==1) {
  ec:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <c>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	41 f4       	brne	.+16     	; 0x104 <main+0xbc>
			c = 0;
  f4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <c>
			timerc = TCNT0 - c1;
  f8:	82 b7       	in	r24, 0x32	; 50
  fa:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <c1>
  fe:	89 1b       	sub	r24, r25
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		}
		// -------------------------------------
		if (timera>20) {			
 104:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timera>
 108:	85 31       	cpi	r24, 0x15	; 21
 10a:	30 f0       	brcs	.+12     	; 0x118 <main+0xd0>
			PORTD |= (1<<7);
 10c:	97 9a       	sbi	0x12, 7	; 18
			d1 = TCNT1;
 10e:	8c b5       	in	r24, 0x2c	; 44
 110:	9d b5       	in	r25, 0x2d	; 45
 112:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <d1>
 116:	0a c0       	rjmp	.+20     	; 0x12c <main+0xe4>
		}
		else if ((TCNT1-d1) > 3906*sec) PORTD &= ~(1<<7);
 118:	8c b5       	in	r24, 0x2c	; 44
 11a:	9d b5       	in	r25, 0x2d	; 45
 11c:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <d1>
 120:	82 1b       	sub	r24, r18
 122:	91 09       	sbc	r25, r1
 124:	85 38       	cpi	r24, 0x85	; 133
 126:	9e 41       	sbci	r25, 0x1E	; 30
 128:	08 f0       	brcs	.+2      	; 0x12c <main+0xe4>
 12a:	97 98       	cbi	0x12, 7	; 18
		//PORTD &= ~(1<<7);
		// -------------------------------------
		if (timerb>20) PORTD |= (1<<6);
 12c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timerb>
 130:	85 31       	cpi	r24, 0x15	; 21
 132:	10 f0       	brcs	.+4      	; 0x138 <main+0xf0>
 134:	96 9a       	sbi	0x12, 6	; 18
 136:	01 c0       	rjmp	.+2      	; 0x13a <main+0xf2>
		else PORTD &= ~(1<<6);
 138:	96 98       	cbi	0x12, 6	; 18
		// -------------------------------------
		if (timerc>20) PORTD |= (1<<5);
 13a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 13e:	85 31       	cpi	r24, 0x15	; 21
 140:	10 f0       	brcs	.+4      	; 0x146 <main+0xfe>
 142:	95 9a       	sbi	0x12, 5	; 18
 144:	01 c0       	rjmp	.+2      	; 0x148 <main+0x100>
		else PORTD &= ~(1<<5);
 146:	95 98       	cbi	0x12, 5	; 18
		// -------------------------------------
		if (PINB &= (0<<0)) {
 148:	86 b3       	in	r24, 0x16	; 22
 14a:	16 ba       	out	0x16, r1	; 22
 14c:	8a cf       	rjmp	.-236    	; 0x62 <main+0x1a>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
