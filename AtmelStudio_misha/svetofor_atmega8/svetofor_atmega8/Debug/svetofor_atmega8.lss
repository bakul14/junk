
svetofor_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ac  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c4  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000290  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a9 36       	cpi	r26, 0x69	; 105
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	73 c0       	rjmp	.+230    	; 0x12c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
uint8_t timera = 0;
uint8_t timerb = 0;
uint8_t timerc = 0;
int main(void)
{
	TCCR0 = 0b00000100;
  48:	84 e0       	ldi	r24, 0x04	; 4
  4a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  4c:	12 be       	out	0x32, r1	; 50
	DDRB |= (0<<0) | (0<<1) | (0<<2); // вход сигналов с приемника
  4e:	87 b3       	in	r24, 0x17	; 23
  50:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<0) | (1<<1) | (1<<2); // выход сигнала на светофор
  52:	81 b3       	in	r24, 0x11	; 17
  54:	87 60       	ori	r24, 0x07	; 7
  56:	81 bb       	out	0x11, r24	; 17
	while (1) {
        // -------------------------------------
		if (PINB &= (1<<0)) {
			if (a == 0) {
				a1 = TCNT0;
				a = 1;
  58:	91 e0       	ldi	r25, 0x01	; 1
	DDRB |= (0<<0) | (0<<1) | (0<<2); // вход сигналов с приемника
	DDRD |= (1<<0) | (1<<1) | (1<<2); // выход сигнала на светофор
	
	while (1) {
        // -------------------------------------
		if (PINB &= (1<<0)) {
  5a:	86 b3       	in	r24, 0x16	; 22
  5c:	81 70       	andi	r24, 0x01	; 1
  5e:	86 bb       	out	0x16, r24	; 22
  60:	88 23       	and	r24, r24
  62:	51 f0       	breq	.+20     	; 0x78 <main+0x30>
			if (a == 0) {
  64:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <a>
  68:	81 11       	cpse	r24, r1
  6a:	12 c0       	rjmp	.+36     	; 0x90 <main+0x48>
				a1 = TCNT0;
  6c:	82 b7       	in	r24, 0x32	; 50
  6e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <a1>
				a = 1;
  72:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <a>
  76:	0c c0       	rjmp	.+24     	; 0x90 <main+0x48>
			}
		}		
		else if (a==1) {
  78:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <a>
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	41 f4       	brne	.+16     	; 0x90 <main+0x48>
			a = 0;
  80:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <a>
			timera = TCNT0 - a1;
  84:	82 b7       	in	r24, 0x32	; 50
  86:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <a1>
  8a:	82 1b       	sub	r24, r18
  8c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <timera>
		}
		// -------------------------------------
		if (PINB &= (1<<1)) {
  90:	86 b3       	in	r24, 0x16	; 22
  92:	82 70       	andi	r24, 0x02	; 2
  94:	86 bb       	out	0x16, r24	; 22
  96:	88 23       	and	r24, r24
  98:	51 f0       	breq	.+20     	; 0xae <main+0x66>
			if (b == 0) {
  9a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <b>
  9e:	81 11       	cpse	r24, r1
  a0:	12 c0       	rjmp	.+36     	; 0xc6 <main+0x7e>
				b1 = TCNT0;
  a2:	82 b7       	in	r24, 0x32	; 50
  a4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <b1>
				b = 1;
  a8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <b>
  ac:	0c c0       	rjmp	.+24     	; 0xc6 <main+0x7e>
			}
		}
		else if (b==1) {
  ae:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <b>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	41 f4       	brne	.+16     	; 0xc6 <main+0x7e>
			b = 0;
  b6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <b>
			timerb = TCNT0 - b1;
  ba:	82 b7       	in	r24, 0x32	; 50
  bc:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <b1>
  c0:	82 1b       	sub	r24, r18
  c2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timerb>
		}		
		// -------------------------------------
		if (PINB &= (1<<2)) {
  c6:	86 b3       	in	r24, 0x16	; 22
  c8:	84 70       	andi	r24, 0x04	; 4
  ca:	86 bb       	out	0x16, r24	; 22
  cc:	88 23       	and	r24, r24
  ce:	51 f0       	breq	.+20     	; 0xe4 <main+0x9c>
			if (c == 0) {
  d0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <c>
  d4:	81 11       	cpse	r24, r1
  d6:	12 c0       	rjmp	.+36     	; 0xfc <main+0xb4>
				c1 = TCNT0;
  d8:	82 b7       	in	r24, 0x32	; 50
  da:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <c1>
				c = 1;
  de:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <c>
  e2:	0c c0       	rjmp	.+24     	; 0xfc <main+0xb4>
			}
		}
		else if (c==1) {
  e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <c>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	41 f4       	brne	.+16     	; 0xfc <main+0xb4>
			c = 0;
  ec:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <c>
			timerc = TCNT0 - c1;
  f0:	82 b7       	in	r24, 0x32	; 50
  f2:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <c1>
  f6:	82 1b       	sub	r24, r18
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		}		
		// -------------------------------------		
		if (timera>20) PORTD |= (1<<0);
  fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timera>
 100:	85 31       	cpi	r24, 0x15	; 21
 102:	10 f0       	brcs	.+4      	; 0x108 <main+0xc0>
 104:	90 9a       	sbi	0x12, 0	; 18
 106:	01 c0       	rjmp	.+2      	; 0x10a <main+0xc2>
		else PORTD &= ~(1<<0);
 108:	90 98       	cbi	0x12, 0	; 18
		// -------------------------------------
		if (timerb>20) PORTD |= (1<<1);
 10a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timerb>
 10e:	85 31       	cpi	r24, 0x15	; 21
 110:	10 f0       	brcs	.+4      	; 0x116 <main+0xce>
 112:	91 9a       	sbi	0x12, 1	; 18
 114:	01 c0       	rjmp	.+2      	; 0x118 <main+0xd0>
		else PORTD &= ~(1<<1);
 116:	91 98       	cbi	0x12, 1	; 18
		// -------------------------------------
		if (timerc>20) PORTD |= (1<<2);
 118:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 11c:	85 31       	cpi	r24, 0x15	; 21
 11e:	10 f0       	brcs	.+4      	; 0x124 <main+0xdc>
 120:	92 9a       	sbi	0x12, 2	; 18
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0xde>
		else PORTD &= ~(1<<2);
 124:	92 98       	cbi	0x12, 2	; 18
		// -------------------------------------
 		if (PINB &= (0<<0)) {
 126:	86 b3       	in	r24, 0x16	; 22
 128:	16 ba       	out	0x16, r1	; 22
 12a:	97 cf       	rjmp	.-210    	; 0x5a <main+0x12>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
