
interrupt_winding.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000166c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000166c  00001700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800078  00800078  00001718  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c1  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c8  00000000  00000000  00001b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000466  00000000  00000000  00001c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fd  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  0000231d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002405  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2a c0       	rjmp	.+84     	; 0x56 <__ctors_end>
       2:	44 c0       	rjmp	.+136    	; 0x8c <__bad_interrupt>
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	94 ca       	rjmp	.-2776   	; 0xfffff530 <__eeprom_end+0xff7ef530>
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	40 c0       	rjmp	.+128    	; 0x8c <__bad_interrupt>
       c:	7f ca       	rjmp	.-2818   	; 0xfffff50c <__eeprom_end+0xff7ef50c>
       e:	3e c0       	rjmp	.+124    	; 0x8c <__bad_interrupt>
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	6a ca       	rjmp	.-2860   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e8>
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	3a c0       	rjmp	.+116    	; 0x8c <__bad_interrupt>
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	38 c0       	rjmp	.+112    	; 0x8c <__bad_interrupt>
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	36 c0       	rjmp	.+108    	; 0x8c <__bad_interrupt>
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	34 c0       	rjmp	.+104    	; 0x8c <__bad_interrupt>
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	26 c3       	rjmp	.+1612   	; 0x674 <__stack+0x215>
      28:	3a c3       	rjmp	.+1652   	; 0x69e <__stack+0x23f>
      2a:	4e c3       	rjmp	.+1692   	; 0x6c8 <__stack+0x269>
      2c:	62 c3       	rjmp	.+1732   	; 0x6f2 <__stack+0x293>
      2e:	76 c3       	rjmp	.+1772   	; 0x71c <__stack+0x2bd>
      30:	8a c3       	rjmp	.+1812   	; 0x746 <__stack+0x2e7>
      32:	9e c3       	rjmp	.+1852   	; 0x770 <__stack+0x311>
      34:	b2 c3       	rjmp	.+1892   	; 0x79a <__stack+0x33b>
      36:	2f c8       	rjmp	.-4002   	; 0xfffff096 <__eeprom_end+0xff7ef096>
      38:	42 c8       	rjmp	.-3964   	; 0xfffff0be <__eeprom_end+0xff7ef0be>
      3a:	55 c8       	rjmp	.-3926   	; 0xfffff0e6 <__eeprom_end+0xff7ef0e6>
      3c:	68 c8       	rjmp	.-3888   	; 0xfffff10e <__eeprom_end+0xff7ef10e>
      3e:	7b c8       	rjmp	.-3850   	; 0xfffff136 <__eeprom_end+0xff7ef136>
      40:	8e c8       	rjmp	.-3812   	; 0xfffff15e <__eeprom_end+0xff7ef15e>
      42:	a1 c8       	rjmp	.-3774   	; 0xfffff186 <__eeprom_end+0xff7ef186>
      44:	b4 c8       	rjmp	.-3736   	; 0xfffff1ae <__eeprom_end+0xff7ef1ae>
      46:	e2 c8       	rjmp	.-3644   	; 0xfffff20c <__eeprom_end+0xff7ef20c>
      48:	f5 c8       	rjmp	.-3606   	; 0xfffff234 <__eeprom_end+0xff7ef234>
      4a:	08 c9       	rjmp	.-3568   	; 0xfffff25c <__eeprom_end+0xff7ef25c>
      4c:	1b c9       	rjmp	.-3530   	; 0xfffff284 <__eeprom_end+0xff7ef284>
      4e:	2e c9       	rjmp	.-3492   	; 0xfffff2ac <__eeprom_end+0xff7ef2ac>
      50:	41 c9       	rjmp	.-3454   	; 0xfffff2d4 <__eeprom_end+0xff7ef2d4>
      52:	54 c9       	rjmp	.-3416   	; 0xfffff2fc <__eeprom_end+0xff7ef2fc>
      54:	67 c9       	rjmp	.-3378   	; 0xfffff324 <__eeprom_end+0xff7ef324>

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d4 e0       	ldi	r29, 0x04	; 4
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ec e6       	ldi	r30, 0x6C	; 108
      6a:	f6 e1       	ldi	r31, 0x16	; 22
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a8 37       	cpi	r26, 0x78	; 120
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	20 e0       	ldi	r18, 0x00	; 0
      7a:	a8 e7       	ldi	r26, 0x78	; 120
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	af 39       	cpi	r26, 0x9F	; 159
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
      88:	ed d3       	rcall	.+2010   	; 0x864 <main>
      8a:	ee ca       	rjmp	.-2596   	; 0xfffff668 <__eeprom_end+0xff7ef668>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <_Z4workv>:




void work() {
	TIMSK |= 1<<4 | 1<<7;
      8e:	89 b7       	in	r24, 0x39	; 57
      90:	80 69       	ori	r24, 0x90	; 144
      92:	89 bf       	out	0x39, r24	; 57
	PORTC &= ~(1<<en2 | 1<<en1);
      94:	85 b3       	in	r24, 0x15	; 21
      96:	83 7f       	andi	r24, 0xF3	; 243
      98:	85 bb       	out	0x15, r24	; 21
	
	PORTC ^= !dir<<dir2;
      9a:	25 b3       	in	r18, 0x15	; 21
      9c:	90 91 79 00 	lds	r25, 0x0079
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	89 27       	eor	r24, r25
      a4:	30 e2       	ldi	r19, 0x20	; 32
      a6:	83 9f       	mul	r24, r19
      a8:	c0 01       	movw	r24, r0
      aa:	11 24       	eor	r1, r1
      ac:	82 27       	eor	r24, r18
      ae:	85 bb       	out	0x15, r24	; 21
			}
			if (PIND & 1<< minus && flag && rpm > 40) {
				rpm -= 10;
				flag = 0;
			}
			data_out = 0b01000001 | 1<<(dir+4) | 1<<(smena+2);
      b0:	66 24       	eor	r6, r6
      b2:	63 94       	inc	r6
      b4:	71 2c       	mov	r7, r1
			PORTC ^= 1<<dir2;
			accel22 = 4000;
			TIMSK |= 1<<4 | 1<<7;
		}
		
		kolvonow = nnow/1600;
      b6:	0f 2e       	mov	r0, r31
      b8:	f0 e4       	ldi	r31, 0x40	; 64
      ba:	8f 2e       	mov	r8, r31
      bc:	f6 e0       	ldi	r31, 0x06	; 6
      be:	9f 2e       	mov	r9, r31
      c0:	a1 2c       	mov	r10, r1
      c2:	b1 2c       	mov	r11, r1
      c4:	f0 2d       	mov	r31, r0
		
		up = kolvonow;
		
		
		
		OCR1A = 150000/rpm/d100*100 - 1 + accel1;
      c6:	0f 2e       	mov	r0, r31
      c8:	f0 ef       	ldi	r31, 0xF0	; 240
      ca:	cf 2e       	mov	r12, r31
      cc:	f9 e4       	ldi	r31, 0x49	; 73
      ce:	df 2e       	mov	r13, r31
      d0:	f2 e0       	ldi	r31, 0x02	; 2
      d2:	ef 2e       	mov	r14, r31
      d4:	f1 2c       	mov	r15, r1
      d6:	f0 2d       	mov	r31, r0
      d8:	0f 2e       	mov	r0, r31
      da:	f4 e6       	ldi	r31, 0x64	; 100
      dc:	5f 2e       	mov	r5, r31
      de:	f0 2d       	mov	r31, r0
		accel1 = accel2*16/d100*100;
		
		
		
		r0 = up/1000;
		r1 = up%1000/100;
      e0:	0f 2e       	mov	r0, r31
      e2:	f8 ee       	ldi	r31, 0xE8	; 232
      e4:	2f 2e       	mov	r2, r31
      e6:	f3 e0       	ldi	r31, 0x03	; 3
      e8:	3f 2e       	mov	r3, r31
      ea:	f0 2d       	mov	r31, r0
		// 			switch 0b00010000:
		// 		}

		if (PIND & 1<<enter && flag) { 
			if (smena == 1) smena = 0;
			else smena = 1;
      ec:	44 24       	eor	r4, r4
      ee:	43 94       	inc	r4
		// 			switch 0b00000001:
		// 			switch 0b00000010:
		// 			switch 0b00010000:
		// 		}

		if (PIND & 1<<enter && flag) { 
      f0:	84 9b       	sbis	0x10, 4	; 16
      f2:	0c c0       	rjmp	.+24     	; 0x10c <_Z4workv+0x7e>
      f4:	80 91 64 00 	lds	r24, 0x0064
      f8:	81 11       	cpse	r24, r1
      fa:	7f c3       	rjmp	.+1790   	; 0x7fa <__stack+0x39b>
      fc:	07 c0       	rjmp	.+14     	; 0x10c <_Z4workv+0x7e>
			if (smena == 1) smena = 0;
      fe:	10 92 60 00 	sts	0x0060, r1
     102:	02 c0       	rjmp	.+4      	; 0x108 <_Z4workv+0x7a>
			else smena = 1;
     104:	40 92 60 00 	sts	0x0060, r4
			 flag = 0;
     108:	10 92 64 00 	sts	0x0064, r1
		 }
			
		
		switch (smena) {
     10c:	80 91 60 00 	lds	r24, 0x0060
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	09 f4       	brne	.+2      	; 0x116 <_Z4workv+0x88>
     114:	41 c0       	rjmp	.+130    	; 0x198 <_Z4workv+0x10a>
			case 0:		
			if (PIND & 1<<plus && flag && d100 < 300) {
     116:	80 9b       	sbis	0x10, 0	; 16
     118:	0c c0       	rjmp	.+24     	; 0x132 <_Z4workv+0xa4>
     11a:	80 91 64 00 	lds	r24, 0x0064
     11e:	88 23       	and	r24, r24
     120:	41 f0       	breq	.+16     	; 0x132 <_Z4workv+0xa4>
     122:	80 91 9d 00 	lds	r24, 0x009D
     126:	90 91 9e 00 	lds	r25, 0x009E
     12a:	8c 32       	cpi	r24, 0x2C	; 44
     12c:	91 40       	sbci	r25, 0x01	; 1
     12e:	08 f4       	brcc	.+2      	; 0x132 <_Z4workv+0xa4>
     130:	69 c3       	rjmp	.+1746   	; 0x804 <__stack+0x3a5>
				d100 = d100 + 1;;
				flag = 0;
			}
			if (PIND & 1<<minus && flag && d100 > 10) {
     132:	81 9b       	sbis	0x10, 1	; 16
     134:	0b c0       	rjmp	.+22     	; 0x14c <_Z4workv+0xbe>
     136:	80 91 64 00 	lds	r24, 0x0064
     13a:	88 23       	and	r24, r24
     13c:	39 f0       	breq	.+14     	; 0x14c <_Z4workv+0xbe>
     13e:	80 91 9d 00 	lds	r24, 0x009D
     142:	90 91 9e 00 	lds	r25, 0x009E
     146:	0b 97       	sbiw	r24, 0x0b	; 11
     148:	08 f0       	brcs	.+2      	; 0x14c <_Z4workv+0xbe>
     14a:	68 c3       	rjmp	.+1744   	; 0x81c <__stack+0x3bd>
				d100 = d100 - 1;
				flag = 0;
			}
			data_out = 0b01000001 | 1<<(dir+4) | 1<<(smena+2);
     14c:	80 91 60 00 	lds	r24, 0x0060
     150:	20 91 79 00 	lds	r18, 0x0079
     154:	2c 5f       	subi	r18, 0xFC	; 252
     156:	a3 01       	movw	r20, r6
     158:	02 c0       	rjmp	.+4      	; 0x15e <_Z4workv+0xd0>
     15a:	44 0f       	add	r20, r20
     15c:	55 1f       	adc	r21, r21
     15e:	2a 95       	dec	r18
     160:	e2 f7       	brpl	.-8      	; 0x15a <_Z4workv+0xcc>
     162:	9a 01       	movw	r18, r20
     164:	8e 5f       	subi	r24, 0xFE	; 254
     166:	a3 01       	movw	r20, r6
     168:	02 c0       	rjmp	.+4      	; 0x16e <_Z4workv+0xe0>
     16a:	44 0f       	add	r20, r20
     16c:	55 1f       	adc	r21, r21
     16e:	8a 95       	dec	r24
     170:	e2 f7       	brpl	.-8      	; 0x16a <_Z4workv+0xdc>
     172:	ca 01       	movw	r24, r20
     174:	82 2b       	or	r24, r18
     176:	93 2b       	or	r25, r19
     178:	81 64       	ori	r24, 0x41	; 65
     17a:	90 93 67 00 	sts	0x0067, r25
     17e:	80 93 66 00 	sts	0x0066, r24
			down = d100;
     182:	80 91 9d 00 	lds	r24, 0x009D
     186:	90 91 9e 00 	lds	r25, 0x009E
     18a:	90 93 89 00 	sts	0x0089, r25
     18e:	80 93 88 00 	sts	0x0088, r24
			dp5 = 1;
     192:	40 92 82 00 	sts	0x0082, r4
			break;
     196:	40 c0       	rjmp	.+128    	; 0x218 <_Z4workv+0x18a>
			
			
			case 1:
			if (PIND & 1<< plus && flag && rpm < 450) {
     198:	80 9b       	sbis	0x10, 0	; 16
     19a:	0c c0       	rjmp	.+24     	; 0x1b4 <_Z4workv+0x126>
     19c:	80 91 64 00 	lds	r24, 0x0064
     1a0:	88 23       	and	r24, r24
     1a2:	41 f0       	breq	.+16     	; 0x1b4 <_Z4workv+0x126>
     1a4:	80 91 75 00 	lds	r24, 0x0075
     1a8:	90 91 76 00 	lds	r25, 0x0076
     1ac:	82 3c       	cpi	r24, 0xC2	; 194
     1ae:	91 40       	sbci	r25, 0x01	; 1
     1b0:	08 f4       	brcc	.+2      	; 0x1b4 <_Z4workv+0x126>
     1b2:	40 c3       	rjmp	.+1664   	; 0x834 <__stack+0x3d5>
				rpm += 10;
				flag = 0;
			}
			if (PIND & 1<< minus && flag && rpm > 40) {
     1b4:	81 9b       	sbis	0x10, 1	; 16
     1b6:	0b c0       	rjmp	.+22     	; 0x1ce <_Z4workv+0x140>
     1b8:	80 91 64 00 	lds	r24, 0x0064
     1bc:	88 23       	and	r24, r24
     1be:	39 f0       	breq	.+14     	; 0x1ce <_Z4workv+0x140>
     1c0:	80 91 75 00 	lds	r24, 0x0075
     1c4:	90 91 76 00 	lds	r25, 0x0076
     1c8:	89 97       	sbiw	r24, 0x29	; 41
     1ca:	08 f0       	brcs	.+2      	; 0x1ce <_Z4workv+0x140>
     1cc:	3f c3       	rjmp	.+1662   	; 0x84c <__stack+0x3ed>
				rpm -= 10;
				flag = 0;
			}
			data_out = 0b01000001 | 1<<(dir+4) | 1<<(smena+2);
     1ce:	80 91 60 00 	lds	r24, 0x0060
     1d2:	20 91 79 00 	lds	r18, 0x0079
     1d6:	2c 5f       	subi	r18, 0xFC	; 252
     1d8:	a3 01       	movw	r20, r6
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <_Z4workv+0x152>
     1dc:	44 0f       	add	r20, r20
     1de:	55 1f       	adc	r21, r21
     1e0:	2a 95       	dec	r18
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <_Z4workv+0x14e>
     1e4:	9a 01       	movw	r18, r20
     1e6:	8e 5f       	subi	r24, 0xFE	; 254
     1e8:	a3 01       	movw	r20, r6
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <_Z4workv+0x162>
     1ec:	44 0f       	add	r20, r20
     1ee:	55 1f       	adc	r21, r21
     1f0:	8a 95       	dec	r24
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <_Z4workv+0x15e>
     1f4:	ca 01       	movw	r24, r20
     1f6:	82 2b       	or	r24, r18
     1f8:	93 2b       	or	r25, r19
     1fa:	81 64       	ori	r24, 0x41	; 65
     1fc:	90 93 67 00 	sts	0x0067, r25
     200:	80 93 66 00 	sts	0x0066, r24
			down = rpm;
     204:	80 91 75 00 	lds	r24, 0x0075
     208:	90 91 76 00 	lds	r25, 0x0076
     20c:	90 93 89 00 	sts	0x0089, r25
     210:	80 93 88 00 	sts	0x0088, r24
			dp5 = 0;
     214:	10 92 82 00 	sts	0x0082, r1
		}
		
		


		if (kolvonow >= N) {
     218:	20 91 7a 00 	lds	r18, 0x007A
     21c:	30 91 7b 00 	lds	r19, 0x007B
     220:	80 91 96 00 	lds	r24, 0x0096
     224:	90 91 97 00 	lds	r25, 0x0097
     228:	28 17       	cp	r18, r24
     22a:	39 07       	cpc	r19, r25
     22c:	30 f0       	brcs	.+12     	; 0x23a <_Z4workv+0x1ac>
			TIMSK &= ~(1<<4 | 1<<7);
     22e:	89 b7       	in	r24, 0x39	; 57
     230:	8f 76       	andi	r24, 0x6F	; 111
     232:	89 bf       	out	0x39, r24	; 57
			PORTC |= 1<<en1 | 1<<en2;
     234:	85 b3       	in	r24, 0x15	; 21
     236:	8c 60       	ori	r24, 0x0C	; 12
     238:	85 bb       	out	0x15, r24	; 21
		}
		if (kolvonow >= N0*laynow) {
     23a:	60 91 65 00 	lds	r22, 0x0065
     23e:	40 91 94 00 	lds	r20, 0x0094
     242:	50 91 95 00 	lds	r21, 0x0095
     246:	80 91 7a 00 	lds	r24, 0x007A
     24a:	90 91 7b 00 	lds	r25, 0x007B
     24e:	64 9f       	mul	r22, r20
     250:	90 01       	movw	r18, r0
     252:	65 9f       	mul	r22, r21
     254:	30 0d       	add	r19, r0
     256:	11 24       	eor	r1, r1
     258:	82 17       	cp	r24, r18
     25a:	93 07       	cpc	r25, r19
     25c:	a8 f0       	brcs	.+42     	; 0x288 <_Z4workv+0x1fa>
			TIMSK &= ~(1<<4 | 1<<7);
     25e:	89 b7       	in	r24, 0x39	; 57
     260:	8f 76       	andi	r24, 0x6F	; 111
     262:	89 bf       	out	0x39, r24	; 57
			laynow++;
     264:	80 91 65 00 	lds	r24, 0x0065
     268:	8f 5f       	subi	r24, 0xFF	; 255
     26a:	80 93 65 00 	sts	0x0065, r24
			PORTC ^= 1<<dir2;
     26e:	85 b3       	in	r24, 0x15	; 21
     270:	50 e2       	ldi	r21, 0x20	; 32
     272:	85 27       	eor	r24, r21
     274:	85 bb       	out	0x15, r24	; 21
			accel22 = 4000;
     276:	80 ea       	ldi	r24, 0xA0	; 160
     278:	9f e0       	ldi	r25, 0x0F	; 15
     27a:	90 93 74 00 	sts	0x0074, r25
     27e:	80 93 73 00 	sts	0x0073, r24
			TIMSK |= 1<<4 | 1<<7;
     282:	89 b7       	in	r24, 0x39	; 57
     284:	80 69       	ori	r24, 0x90	; 144
     286:	89 bf       	out	0x39, r24	; 57
		}
		
		kolvonow = nnow/1600;
     288:	60 91 7c 00 	lds	r22, 0x007C
     28c:	70 91 7d 00 	lds	r23, 0x007D
     290:	80 91 7e 00 	lds	r24, 0x007E
     294:	90 91 7f 00 	lds	r25, 0x007F
     298:	a5 01       	movw	r20, r10
     29a:	94 01       	movw	r18, r8
     29c:	9b d9       	rcall	.-3274   	; 0xfffff5d4 <__eeprom_end+0xff7ef5d4>
     29e:	30 93 7b 00 	sts	0x007B, r19
     2a2:	20 93 7a 00 	sts	0x007A, r18
		
		up = kolvonow;
     2a6:	80 91 7a 00 	lds	r24, 0x007A
     2aa:	90 91 7b 00 	lds	r25, 0x007B
     2ae:	90 93 8b 00 	sts	0x008B, r25
     2b2:	80 93 8a 00 	sts	0x008A, r24
		
		
		
		OCR1A = 150000/rpm/d100*100 - 1 + accel1;
     2b6:	20 91 75 00 	lds	r18, 0x0075
     2ba:	30 91 76 00 	lds	r19, 0x0076
     2be:	00 91 9d 00 	lds	r16, 0x009D
     2c2:	10 91 9e 00 	lds	r17, 0x009E
     2c6:	80 91 99 00 	lds	r24, 0x0099
     2ca:	90 91 9a 00 	lds	r25, 0x009A
     2ce:	a0 91 9b 00 	lds	r26, 0x009B
     2d2:	b0 91 9c 00 	lds	r27, 0x009C
     2d6:	ec 01       	movw	r28, r24
     2d8:	21 97       	sbiw	r28, 0x01	; 1
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	c7 01       	movw	r24, r14
     2e0:	b6 01       	movw	r22, r12
     2e2:	9a d9       	rcall	.-3276   	; 0xfffff618 <__eeprom_end+0xff7ef618>
     2e4:	ca 01       	movw	r24, r20
     2e6:	b9 01       	movw	r22, r18
     2e8:	98 01       	movw	r18, r16
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	94 d9       	rcall	.-3288   	; 0xfffff618 <__eeprom_end+0xff7ef618>
     2f0:	52 9e       	mul	r5, r18
     2f2:	c0 01       	movw	r24, r0
     2f4:	53 9e       	mul	r5, r19
     2f6:	90 0d       	add	r25, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	c8 0f       	add	r28, r24
     2fc:	d9 1f       	adc	r29, r25
     2fe:	db bd       	out	0x2b, r29	; 43
     300:	ca bd       	out	0x2a, r28	; 42
		OCR2 = 9375/rpm - 1 + accel2;
     302:	60 91 75 00 	lds	r22, 0x0075
     306:	70 91 76 00 	lds	r23, 0x0076
     30a:	20 91 98 00 	lds	r18, 0x0098
     30e:	21 50       	subi	r18, 0x01	; 1
     310:	8f e9       	ldi	r24, 0x9F	; 159
     312:	94 e2       	ldi	r25, 0x24	; 36
     314:	4b d9       	rcall	.-3434   	; 0xfffff5ac <__eeprom_end+0xff7ef5ac>
     316:	26 0f       	add	r18, r22
     318:	23 bd       	out	0x23, r18	; 35
		accel2 = accel22/16;
     31a:	80 91 73 00 	lds	r24, 0x0073
     31e:	90 91 74 00 	lds	r25, 0x0074
     322:	92 95       	swap	r25
     324:	82 95       	swap	r24
     326:	8f 70       	andi	r24, 0x0F	; 15
     328:	89 27       	eor	r24, r25
     32a:	9f 70       	andi	r25, 0x0F	; 15
     32c:	89 27       	eor	r24, r25
     32e:	80 93 98 00 	sts	0x0098, r24
		accel1 = accel2*16/d100*100;
     332:	80 91 98 00 	lds	r24, 0x0098
     336:	60 91 9d 00 	lds	r22, 0x009D
     33a:	70 91 9e 00 	lds	r23, 0x009E
     33e:	20 e1       	ldi	r18, 0x10	; 16
     340:	82 9f       	mul	r24, r18
     342:	c0 01       	movw	r24, r0
     344:	11 24       	eor	r1, r1
     346:	32 d9       	rcall	.-3484   	; 0xfffff5ac <__eeprom_end+0xff7ef5ac>
     348:	56 9e       	mul	r5, r22
     34a:	c0 01       	movw	r24, r0
     34c:	57 9e       	mul	r5, r23
     34e:	90 0d       	add	r25, r0
     350:	11 24       	eor	r1, r1
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	80 93 99 00 	sts	0x0099, r24
     35a:	90 93 9a 00 	sts	0x009A, r25
     35e:	a0 93 9b 00 	sts	0x009B, r26
     362:	b0 93 9c 00 	sts	0x009C, r27
		
		
		
		r0 = up/1000;
     366:	20 91 8a 00 	lds	r18, 0x008A
     36a:	30 91 8b 00 	lds	r19, 0x008B
     36e:	36 95       	lsr	r19
     370:	27 95       	ror	r18
     372:	36 95       	lsr	r19
     374:	27 95       	ror	r18
     376:	36 95       	lsr	r19
     378:	27 95       	ror	r18
     37a:	a5 ec       	ldi	r26, 0xC5	; 197
     37c:	b0 e2       	ldi	r27, 0x20	; 32
     37e:	68 d9       	rcall	.-3376   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     380:	92 95       	swap	r25
     382:	82 95       	swap	r24
     384:	8f 70       	andi	r24, 0x0F	; 15
     386:	89 27       	eor	r24, r25
     388:	9f 70       	andi	r25, 0x0F	; 15
     38a:	89 27       	eor	r24, r25
     38c:	80 93 93 00 	sts	0x0093, r24
		r1 = up%1000/100;
     390:	40 91 8a 00 	lds	r20, 0x008A
     394:	50 91 8b 00 	lds	r21, 0x008B
     398:	9a 01       	movw	r18, r20
     39a:	36 95       	lsr	r19
     39c:	27 95       	ror	r18
     39e:	36 95       	lsr	r19
     3a0:	27 95       	ror	r18
     3a2:	36 95       	lsr	r19
     3a4:	27 95       	ror	r18
     3a6:	54 d9       	rcall	.-3416   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     3a8:	92 95       	swap	r25
     3aa:	82 95       	swap	r24
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	89 27       	eor	r24, r25
     3b0:	9f 70       	andi	r25, 0x0F	; 15
     3b2:	89 27       	eor	r24, r25
     3b4:	82 9d       	mul	r24, r2
     3b6:	90 01       	movw	r18, r0
     3b8:	83 9d       	mul	r24, r3
     3ba:	30 0d       	add	r19, r0
     3bc:	92 9d       	mul	r25, r2
     3be:	30 0d       	add	r19, r0
     3c0:	11 24       	eor	r1, r1
     3c2:	42 1b       	sub	r20, r18
     3c4:	53 0b       	sbc	r21, r19
     3c6:	9a 01       	movw	r18, r20
     3c8:	36 95       	lsr	r19
     3ca:	27 95       	ror	r18
     3cc:	36 95       	lsr	r19
     3ce:	27 95       	ror	r18
     3d0:	ab e7       	ldi	r26, 0x7B	; 123
     3d2:	b4 e1       	ldi	r27, 0x14	; 20
     3d4:	3d d9       	rcall	.-3462   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     3d6:	96 95       	lsr	r25
     3d8:	87 95       	ror	r24
     3da:	80 93 92 00 	sts	0x0092, r24
		r2 = up%1000%100/10;
     3de:	40 91 8a 00 	lds	r20, 0x008A
     3e2:	50 91 8b 00 	lds	r21, 0x008B
     3e6:	9a 01       	movw	r18, r20
     3e8:	36 95       	lsr	r19
     3ea:	27 95       	ror	r18
     3ec:	36 95       	lsr	r19
     3ee:	27 95       	ror	r18
     3f0:	36 95       	lsr	r19
     3f2:	27 95       	ror	r18
     3f4:	a5 ec       	ldi	r26, 0xC5	; 197
     3f6:	b0 e2       	ldi	r27, 0x20	; 32
     3f8:	2b d9       	rcall	.-3498   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     3fa:	92 95       	swap	r25
     3fc:	82 95       	swap	r24
     3fe:	8f 70       	andi	r24, 0x0F	; 15
     400:	89 27       	eor	r24, r25
     402:	9f 70       	andi	r25, 0x0F	; 15
     404:	89 27       	eor	r24, r25
     406:	82 9d       	mul	r24, r2
     408:	90 01       	movw	r18, r0
     40a:	83 9d       	mul	r24, r3
     40c:	30 0d       	add	r19, r0
     40e:	92 9d       	mul	r25, r2
     410:	30 0d       	add	r19, r0
     412:	11 24       	eor	r1, r1
     414:	42 1b       	sub	r20, r18
     416:	53 0b       	sbc	r21, r19
     418:	9a 01       	movw	r18, r20
     41a:	36 95       	lsr	r19
     41c:	27 95       	ror	r18
     41e:	36 95       	lsr	r19
     420:	27 95       	ror	r18
     422:	ab e7       	ldi	r26, 0x7B	; 123
     424:	b4 e1       	ldi	r27, 0x14	; 20
     426:	14 d9       	rcall	.-3544   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     428:	96 95       	lsr	r25
     42a:	87 95       	ror	r24
     42c:	58 9e       	mul	r5, r24
     42e:	90 01       	movw	r18, r0
     430:	59 9e       	mul	r5, r25
     432:	30 0d       	add	r19, r0
     434:	11 24       	eor	r1, r1
     436:	ca 01       	movw	r24, r20
     438:	82 1b       	sub	r24, r18
     43a:	93 0b       	sbc	r25, r19
     43c:	9c 01       	movw	r18, r24
     43e:	ad ec       	ldi	r26, 0xCD	; 205
     440:	bc ec       	ldi	r27, 0xCC	; 204
     442:	06 d9       	rcall	.-3572   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     444:	96 95       	lsr	r25
     446:	87 95       	ror	r24
     448:	96 95       	lsr	r25
     44a:	87 95       	ror	r24
     44c:	96 95       	lsr	r25
     44e:	87 95       	ror	r24
     450:	80 93 91 00 	sts	0x0091, r24
		r3 = up%1000%100%10;
     454:	40 91 8a 00 	lds	r20, 0x008A
     458:	50 91 8b 00 	lds	r21, 0x008B
     45c:	9a 01       	movw	r18, r20
     45e:	36 95       	lsr	r19
     460:	27 95       	ror	r18
     462:	36 95       	lsr	r19
     464:	27 95       	ror	r18
     466:	36 95       	lsr	r19
     468:	27 95       	ror	r18
     46a:	a5 ec       	ldi	r26, 0xC5	; 197
     46c:	b0 e2       	ldi	r27, 0x20	; 32
     46e:	f0 d8       	rcall	.-3616   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     470:	92 95       	swap	r25
     472:	82 95       	swap	r24
     474:	8f 70       	andi	r24, 0x0F	; 15
     476:	89 27       	eor	r24, r25
     478:	9f 70       	andi	r25, 0x0F	; 15
     47a:	89 27       	eor	r24, r25
     47c:	82 9d       	mul	r24, r2
     47e:	90 01       	movw	r18, r0
     480:	83 9d       	mul	r24, r3
     482:	30 0d       	add	r19, r0
     484:	92 9d       	mul	r25, r2
     486:	30 0d       	add	r19, r0
     488:	11 24       	eor	r1, r1
     48a:	42 1b       	sub	r20, r18
     48c:	53 0b       	sbc	r21, r19
     48e:	9a 01       	movw	r18, r20
     490:	36 95       	lsr	r19
     492:	27 95       	ror	r18
     494:	36 95       	lsr	r19
     496:	27 95       	ror	r18
     498:	ab e7       	ldi	r26, 0x7B	; 123
     49a:	b4 e1       	ldi	r27, 0x14	; 20
     49c:	d9 d8       	rcall	.-3662   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     49e:	96 95       	lsr	r25
     4a0:	87 95       	ror	r24
     4a2:	58 9e       	mul	r5, r24
     4a4:	90 01       	movw	r18, r0
     4a6:	59 9e       	mul	r5, r25
     4a8:	30 0d       	add	r19, r0
     4aa:	11 24       	eor	r1, r1
     4ac:	42 1b       	sub	r20, r18
     4ae:	53 0b       	sbc	r21, r19
     4b0:	9a 01       	movw	r18, r20
     4b2:	ad ec       	ldi	r26, 0xCD	; 205
     4b4:	bc ec       	ldi	r27, 0xCC	; 204
     4b6:	cc d8       	rcall	.-3688   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     4b8:	96 95       	lsr	r25
     4ba:	87 95       	ror	r24
     4bc:	96 95       	lsr	r25
     4be:	87 95       	ror	r24
     4c0:	96 95       	lsr	r25
     4c2:	87 95       	ror	r24
     4c4:	9c 01       	movw	r18, r24
     4c6:	22 0f       	add	r18, r18
     4c8:	33 1f       	adc	r19, r19
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	82 0f       	add	r24, r18
     4d8:	93 1f       	adc	r25, r19
     4da:	48 1b       	sub	r20, r24
     4dc:	59 0b       	sbc	r21, r25
     4de:	40 93 90 00 	sts	0x0090, r20
		r4 = down/1000;
     4e2:	20 91 88 00 	lds	r18, 0x0088
     4e6:	30 91 89 00 	lds	r19, 0x0089
     4ea:	36 95       	lsr	r19
     4ec:	27 95       	ror	r18
     4ee:	36 95       	lsr	r19
     4f0:	27 95       	ror	r18
     4f2:	36 95       	lsr	r19
     4f4:	27 95       	ror	r18
     4f6:	a5 ec       	ldi	r26, 0xC5	; 197
     4f8:	b0 e2       	ldi	r27, 0x20	; 32
     4fa:	aa d8       	rcall	.-3756   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     4fc:	92 95       	swap	r25
     4fe:	82 95       	swap	r24
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	89 27       	eor	r24, r25
     504:	9f 70       	andi	r25, 0x0F	; 15
     506:	89 27       	eor	r24, r25
     508:	80 93 8f 00 	sts	0x008F, r24
		r5 = down%1000/100;
     50c:	40 91 88 00 	lds	r20, 0x0088
     510:	50 91 89 00 	lds	r21, 0x0089
     514:	9a 01       	movw	r18, r20
     516:	36 95       	lsr	r19
     518:	27 95       	ror	r18
     51a:	36 95       	lsr	r19
     51c:	27 95       	ror	r18
     51e:	36 95       	lsr	r19
     520:	27 95       	ror	r18
     522:	96 d8       	rcall	.-3796   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     524:	92 95       	swap	r25
     526:	82 95       	swap	r24
     528:	8f 70       	andi	r24, 0x0F	; 15
     52a:	89 27       	eor	r24, r25
     52c:	9f 70       	andi	r25, 0x0F	; 15
     52e:	89 27       	eor	r24, r25
     530:	82 9d       	mul	r24, r2
     532:	90 01       	movw	r18, r0
     534:	83 9d       	mul	r24, r3
     536:	30 0d       	add	r19, r0
     538:	92 9d       	mul	r25, r2
     53a:	30 0d       	add	r19, r0
     53c:	11 24       	eor	r1, r1
     53e:	42 1b       	sub	r20, r18
     540:	53 0b       	sbc	r21, r19
     542:	9a 01       	movw	r18, r20
     544:	36 95       	lsr	r19
     546:	27 95       	ror	r18
     548:	36 95       	lsr	r19
     54a:	27 95       	ror	r18
     54c:	ab e7       	ldi	r26, 0x7B	; 123
     54e:	b4 e1       	ldi	r27, 0x14	; 20
     550:	7f d8       	rcall	.-3842   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     552:	96 95       	lsr	r25
     554:	87 95       	ror	r24
     556:	80 93 8e 00 	sts	0x008E, r24
		r6 = down%1000%100/10;
     55a:	40 91 88 00 	lds	r20, 0x0088
     55e:	50 91 89 00 	lds	r21, 0x0089
     562:	9a 01       	movw	r18, r20
     564:	36 95       	lsr	r19
     566:	27 95       	ror	r18
     568:	36 95       	lsr	r19
     56a:	27 95       	ror	r18
     56c:	36 95       	lsr	r19
     56e:	27 95       	ror	r18
     570:	a5 ec       	ldi	r26, 0xC5	; 197
     572:	b0 e2       	ldi	r27, 0x20	; 32
     574:	6d d8       	rcall	.-3878   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     576:	92 95       	swap	r25
     578:	82 95       	swap	r24
     57a:	8f 70       	andi	r24, 0x0F	; 15
     57c:	89 27       	eor	r24, r25
     57e:	9f 70       	andi	r25, 0x0F	; 15
     580:	89 27       	eor	r24, r25
     582:	82 9d       	mul	r24, r2
     584:	90 01       	movw	r18, r0
     586:	83 9d       	mul	r24, r3
     588:	30 0d       	add	r19, r0
     58a:	92 9d       	mul	r25, r2
     58c:	30 0d       	add	r19, r0
     58e:	11 24       	eor	r1, r1
     590:	42 1b       	sub	r20, r18
     592:	53 0b       	sbc	r21, r19
     594:	9a 01       	movw	r18, r20
     596:	36 95       	lsr	r19
     598:	27 95       	ror	r18
     59a:	36 95       	lsr	r19
     59c:	27 95       	ror	r18
     59e:	ab e7       	ldi	r26, 0x7B	; 123
     5a0:	b4 e1       	ldi	r27, 0x14	; 20
     5a2:	56 d8       	rcall	.-3924   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     5a4:	96 95       	lsr	r25
     5a6:	87 95       	ror	r24
     5a8:	58 9e       	mul	r5, r24
     5aa:	90 01       	movw	r18, r0
     5ac:	59 9e       	mul	r5, r25
     5ae:	30 0d       	add	r19, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	ca 01       	movw	r24, r20
     5b4:	82 1b       	sub	r24, r18
     5b6:	93 0b       	sbc	r25, r19
     5b8:	9c 01       	movw	r18, r24
     5ba:	ad ec       	ldi	r26, 0xCD	; 205
     5bc:	bc ec       	ldi	r27, 0xCC	; 204
     5be:	48 d8       	rcall	.-3952   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     5c0:	96 95       	lsr	r25
     5c2:	87 95       	ror	r24
     5c4:	96 95       	lsr	r25
     5c6:	87 95       	ror	r24
     5c8:	96 95       	lsr	r25
     5ca:	87 95       	ror	r24
     5cc:	80 93 8d 00 	sts	0x008D, r24
		r7 = down%1000%100%10;
     5d0:	40 91 88 00 	lds	r20, 0x0088
     5d4:	50 91 89 00 	lds	r21, 0x0089
     5d8:	9a 01       	movw	r18, r20
     5da:	36 95       	lsr	r19
     5dc:	27 95       	ror	r18
     5de:	36 95       	lsr	r19
     5e0:	27 95       	ror	r18
     5e2:	36 95       	lsr	r19
     5e4:	27 95       	ror	r18
     5e6:	a5 ec       	ldi	r26, 0xC5	; 197
     5e8:	b0 e2       	ldi	r27, 0x20	; 32
     5ea:	32 d8       	rcall	.-3996   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     5ec:	92 95       	swap	r25
     5ee:	82 95       	swap	r24
     5f0:	8f 70       	andi	r24, 0x0F	; 15
     5f2:	89 27       	eor	r24, r25
     5f4:	9f 70       	andi	r25, 0x0F	; 15
     5f6:	89 27       	eor	r24, r25
     5f8:	82 9d       	mul	r24, r2
     5fa:	90 01       	movw	r18, r0
     5fc:	83 9d       	mul	r24, r3
     5fe:	30 0d       	add	r19, r0
     600:	92 9d       	mul	r25, r2
     602:	30 0d       	add	r19, r0
     604:	11 24       	eor	r1, r1
     606:	42 1b       	sub	r20, r18
     608:	53 0b       	sbc	r21, r19
     60a:	9a 01       	movw	r18, r20
     60c:	36 95       	lsr	r19
     60e:	27 95       	ror	r18
     610:	36 95       	lsr	r19
     612:	27 95       	ror	r18
     614:	ab e7       	ldi	r26, 0x7B	; 123
     616:	b4 e1       	ldi	r27, 0x14	; 20
     618:	1b d8       	rcall	.-4042   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     61a:	96 95       	lsr	r25
     61c:	87 95       	ror	r24
     61e:	58 9e       	mul	r5, r24
     620:	90 01       	movw	r18, r0
     622:	59 9e       	mul	r5, r25
     624:	30 0d       	add	r19, r0
     626:	11 24       	eor	r1, r1
     628:	42 1b       	sub	r20, r18
     62a:	53 0b       	sbc	r21, r19
     62c:	9a 01       	movw	r18, r20
     62e:	ad ec       	ldi	r26, 0xCD	; 205
     630:	bc ec       	ldi	r27, 0xCC	; 204
     632:	0e d8       	rcall	.-4068   	; 0xfffff650 <__eeprom_end+0xff7ef650>
     634:	96 95       	lsr	r25
     636:	87 95       	ror	r24
     638:	96 95       	lsr	r25
     63a:	87 95       	ror	r24
     63c:	96 95       	lsr	r25
     63e:	87 95       	ror	r24
     640:	9c 01       	movw	r18, r24
     642:	22 0f       	add	r18, r18
     644:	33 1f       	adc	r19, r19
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	48 1b       	sub	r20, r24
     658:	59 0b       	sbc	r21, r25
     65a:	40 93 8c 00 	sts	0x008C, r20
		
		
		switch (r) {
     65e:	80 91 78 00 	lds	r24, 0x0078
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	88 30       	cpi	r24, 0x08	; 8
     666:	91 05       	cpc	r25, r1
     668:	08 f0       	brcs	.+2      	; 0x66c <__stack+0x20d>
     66a:	ab c0       	rjmp	.+342    	; 0x7c2 <__stack+0x363>
     66c:	fc 01       	movw	r30, r24
     66e:	ed 5e       	subi	r30, 0xED	; 237
     670:	ff 4f       	sbci	r31, 0xFF	; 255
     672:	09 94       	ijmp
			case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
     674:	e0 91 93 00 	lds	r30, 0x0093
     678:	80 91 87 00 	lds	r24, 0x0087
     67c:	20 e2       	ldi	r18, 0x20	; 32
     67e:	82 9f       	mul	r24, r18
     680:	c0 01       	movw	r24, r0
     682:	11 24       	eor	r1, r1
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	e8 59       	subi	r30, 0x98	; 152
     688:	ff 4f       	sbci	r31, 0xFF	; 255
     68a:	90 81       	ld	r25, Z
     68c:	89 2b       	or	r24, r25
     68e:	8f b9       	out	0x0f, r24	; 15
     690:	77 9b       	sbis	0x0e, 7	; 14
     692:	fe cf       	rjmp	.-4      	; 0x690 <__stack+0x231>
     694:	30 e8       	ldi	r19, 0x80	; 128
     696:	3f b9       	out	0x0f, r19	; 15
     698:	77 9b       	sbis	0x0e, 7	; 14
     69a:	fe cf       	rjmp	.-4      	; 0x698 <__stack+0x239>
     69c:	92 c0       	rjmp	.+292    	; 0x7c2 <__stack+0x363>
			case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
     69e:	e0 91 92 00 	lds	r30, 0x0092
     6a2:	80 91 86 00 	lds	r24, 0x0086
     6a6:	40 e2       	ldi	r20, 0x20	; 32
     6a8:	84 9f       	mul	r24, r20
     6aa:	c0 01       	movw	r24, r0
     6ac:	11 24       	eor	r1, r1
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	e8 59       	subi	r30, 0x98	; 152
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	90 81       	ld	r25, Z
     6b6:	89 2b       	or	r24, r25
     6b8:	8f b9       	out	0x0f, r24	; 15
     6ba:	77 9b       	sbis	0x0e, 7	; 14
     6bc:	fe cf       	rjmp	.-4      	; 0x6ba <__stack+0x25b>
     6be:	50 e4       	ldi	r21, 0x40	; 64
     6c0:	5f b9       	out	0x0f, r21	; 15
     6c2:	77 9b       	sbis	0x0e, 7	; 14
     6c4:	fe cf       	rjmp	.-4      	; 0x6c2 <__stack+0x263>
     6c6:	7d c0       	rjmp	.+250    	; 0x7c2 <__stack+0x363>
			case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
     6c8:	e0 91 91 00 	lds	r30, 0x0091
     6cc:	80 91 85 00 	lds	r24, 0x0085
     6d0:	20 e2       	ldi	r18, 0x20	; 32
     6d2:	82 9f       	mul	r24, r18
     6d4:	c0 01       	movw	r24, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	e8 59       	subi	r30, 0x98	; 152
     6dc:	ff 4f       	sbci	r31, 0xFF	; 255
     6de:	90 81       	ld	r25, Z
     6e0:	89 2b       	or	r24, r25
     6e2:	8f b9       	out	0x0f, r24	; 15
     6e4:	77 9b       	sbis	0x0e, 7	; 14
     6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <__stack+0x285>
     6e8:	30 e2       	ldi	r19, 0x20	; 32
     6ea:	3f b9       	out	0x0f, r19	; 15
     6ec:	77 9b       	sbis	0x0e, 7	; 14
     6ee:	fe cf       	rjmp	.-4      	; 0x6ec <__stack+0x28d>
     6f0:	68 c0       	rjmp	.+208    	; 0x7c2 <__stack+0x363>
			case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
     6f2:	e0 91 90 00 	lds	r30, 0x0090
     6f6:	80 91 84 00 	lds	r24, 0x0084
     6fa:	40 e2       	ldi	r20, 0x20	; 32
     6fc:	84 9f       	mul	r24, r20
     6fe:	c0 01       	movw	r24, r0
     700:	11 24       	eor	r1, r1
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	e8 59       	subi	r30, 0x98	; 152
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	90 81       	ld	r25, Z
     70a:	89 2b       	or	r24, r25
     70c:	8f b9       	out	0x0f, r24	; 15
     70e:	77 9b       	sbis	0x0e, 7	; 14
     710:	fe cf       	rjmp	.-4      	; 0x70e <__stack+0x2af>
     712:	50 e1       	ldi	r21, 0x10	; 16
     714:	5f b9       	out	0x0f, r21	; 15
     716:	77 9b       	sbis	0x0e, 7	; 14
     718:	fe cf       	rjmp	.-4      	; 0x716 <__stack+0x2b7>
     71a:	53 c0       	rjmp	.+166    	; 0x7c2 <__stack+0x363>
			case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
     71c:	e0 91 8f 00 	lds	r30, 0x008F
     720:	80 91 83 00 	lds	r24, 0x0083
     724:	20 e2       	ldi	r18, 0x20	; 32
     726:	82 9f       	mul	r24, r18
     728:	c0 01       	movw	r24, r0
     72a:	11 24       	eor	r1, r1
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	e8 59       	subi	r30, 0x98	; 152
     730:	ff 4f       	sbci	r31, 0xFF	; 255
     732:	90 81       	ld	r25, Z
     734:	89 2b       	or	r24, r25
     736:	8f b9       	out	0x0f, r24	; 15
     738:	77 9b       	sbis	0x0e, 7	; 14
     73a:	fe cf       	rjmp	.-4      	; 0x738 <__stack+0x2d9>
     73c:	32 e0       	ldi	r19, 0x02	; 2
     73e:	3f b9       	out	0x0f, r19	; 15
     740:	77 9b       	sbis	0x0e, 7	; 14
     742:	fe cf       	rjmp	.-4      	; 0x740 <__stack+0x2e1>
     744:	3e c0       	rjmp	.+124    	; 0x7c2 <__stack+0x363>
			case 5: SPDR = mass[r5] | dp5<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000100; while(!(SPSR & (1<<SPIF))); break;
     746:	e0 91 8e 00 	lds	r30, 0x008E
     74a:	80 91 82 00 	lds	r24, 0x0082
     74e:	40 e2       	ldi	r20, 0x20	; 32
     750:	84 9f       	mul	r24, r20
     752:	c0 01       	movw	r24, r0
     754:	11 24       	eor	r1, r1
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	e8 59       	subi	r30, 0x98	; 152
     75a:	ff 4f       	sbci	r31, 0xFF	; 255
     75c:	90 81       	ld	r25, Z
     75e:	89 2b       	or	r24, r25
     760:	8f b9       	out	0x0f, r24	; 15
     762:	77 9b       	sbis	0x0e, 7	; 14
     764:	fe cf       	rjmp	.-4      	; 0x762 <__stack+0x303>
     766:	54 e0       	ldi	r21, 0x04	; 4
     768:	5f b9       	out	0x0f, r21	; 15
     76a:	77 9b       	sbis	0x0e, 7	; 14
     76c:	fe cf       	rjmp	.-4      	; 0x76a <__stack+0x30b>
     76e:	29 c0       	rjmp	.+82     	; 0x7c2 <__stack+0x363>
			case 6: SPDR = mass[r6] | dp6<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00001000; while(!(SPSR & (1<<SPIF))); break;
     770:	e0 91 8d 00 	lds	r30, 0x008D
     774:	80 91 81 00 	lds	r24, 0x0081
     778:	20 e2       	ldi	r18, 0x20	; 32
     77a:	82 9f       	mul	r24, r18
     77c:	c0 01       	movw	r24, r0
     77e:	11 24       	eor	r1, r1
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	e8 59       	subi	r30, 0x98	; 152
     784:	ff 4f       	sbci	r31, 0xFF	; 255
     786:	90 81       	ld	r25, Z
     788:	89 2b       	or	r24, r25
     78a:	8f b9       	out	0x0f, r24	; 15
     78c:	77 9b       	sbis	0x0e, 7	; 14
     78e:	fe cf       	rjmp	.-4      	; 0x78c <__stack+0x32d>
     790:	38 e0       	ldi	r19, 0x08	; 8
     792:	3f b9       	out	0x0f, r19	; 15
     794:	77 9b       	sbis	0x0e, 7	; 14
     796:	fe cf       	rjmp	.-4      	; 0x794 <__stack+0x335>
     798:	14 c0       	rjmp	.+40     	; 0x7c2 <__stack+0x363>
			case 7: SPDR = mass[r7] | dp7<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000001; while(!(SPSR & (1<<SPIF))); break;
     79a:	e0 91 8c 00 	lds	r30, 0x008C
     79e:	80 91 80 00 	lds	r24, 0x0080
     7a2:	40 e2       	ldi	r20, 0x20	; 32
     7a4:	84 9f       	mul	r24, r20
     7a6:	c0 01       	movw	r24, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	e8 59       	subi	r30, 0x98	; 152
     7ae:	ff 4f       	sbci	r31, 0xFF	; 255
     7b0:	90 81       	ld	r25, Z
     7b2:	89 2b       	or	r24, r25
     7b4:	8f b9       	out	0x0f, r24	; 15
     7b6:	77 9b       	sbis	0x0e, 7	; 14
     7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <__stack+0x357>
     7ba:	51 e0       	ldi	r21, 0x01	; 1
     7bc:	5f b9       	out	0x0f, r21	; 15
     7be:	77 9b       	sbis	0x0e, 7	; 14
     7c0:	fe cf       	rjmp	.-4      	; 0x7be <__stack+0x35f>
		}
		PORTB |= 1<<2;
     7c2:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~1<<2;
     7c4:	88 b3       	in	r24, 0x18	; 24
     7c6:	88 7f       	andi	r24, 0xF8	; 248
     7c8:	88 bb       	out	0x18, r24	; 24
		
		SPDR = data_out;
     7ca:	80 91 66 00 	lds	r24, 0x0066
     7ce:	90 91 67 00 	lds	r25, 0x0067
     7d2:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
     7d4:	77 9b       	sbis	0x0e, 7	; 14
     7d6:	fe cf       	rjmp	.-4      	; 0x7d4 <__stack+0x375>
		PORTB |= 1<<1;
     7d8:	c1 9a       	sbi	0x18, 1	; 24
		PORTB &= ~1<<1;
     7da:	88 b3       	in	r24, 0x18	; 24
     7dc:	8c 7f       	andi	r24, 0xFC	; 252
     7de:	88 bb       	out	0x18, r24	; 24
		
		r++;
     7e0:	80 91 78 00 	lds	r24, 0x0078
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	80 93 78 00 	sts	0x0078, r24
		if (r > 7) r = 0;
     7ea:	80 91 78 00 	lds	r24, 0x0078
     7ee:	88 30       	cpi	r24, 0x08	; 8
     7f0:	08 f4       	brcc	.+2      	; 0x7f4 <__stack+0x395>
     7f2:	7e cc       	rjmp	.-1796   	; 0xf0 <_Z4workv+0x62>
     7f4:	10 92 78 00 	sts	0x0078, r1
     7f8:	7b cc       	rjmp	.-1802   	; 0xf0 <_Z4workv+0x62>
		// 			switch 0b00000010:
		// 			switch 0b00010000:
		// 		}

		if (PIND & 1<<enter && flag) { 
			if (smena == 1) smena = 0;
     7fa:	80 91 60 00 	lds	r24, 0x0060
     7fe:	81 11       	cpse	r24, r1
     800:	7e cc       	rjmp	.-1796   	; 0xfe <_Z4workv+0x70>
     802:	80 cc       	rjmp	.-1792   	; 0x104 <_Z4workv+0x76>
			
		
		switch (smena) {
			case 0:		
			if (PIND & 1<<plus && flag && d100 < 300) {
				d100 = d100 + 1;;
     804:	80 91 9d 00 	lds	r24, 0x009D
     808:	90 91 9e 00 	lds	r25, 0x009E
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	90 93 9e 00 	sts	0x009E, r25
     812:	80 93 9d 00 	sts	0x009D, r24
				flag = 0;
     816:	10 92 64 00 	sts	0x0064, r1
     81a:	8b cc       	rjmp	.-1770   	; 0x132 <_Z4workv+0xa4>
			}
			if (PIND & 1<<minus && flag && d100 > 10) {
				d100 = d100 - 1;
     81c:	80 91 9d 00 	lds	r24, 0x009D
     820:	90 91 9e 00 	lds	r25, 0x009E
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	90 93 9e 00 	sts	0x009E, r25
     82a:	80 93 9d 00 	sts	0x009D, r24
				flag = 0;
     82e:	10 92 64 00 	sts	0x0064, r1
     832:	8c cc       	rjmp	.-1768   	; 0x14c <_Z4workv+0xbe>
			break;
			
			
			case 1:
			if (PIND & 1<< plus && flag && rpm < 450) {
				rpm += 10;
     834:	80 91 75 00 	lds	r24, 0x0075
     838:	90 91 76 00 	lds	r25, 0x0076
     83c:	0a 96       	adiw	r24, 0x0a	; 10
     83e:	90 93 76 00 	sts	0x0076, r25
     842:	80 93 75 00 	sts	0x0075, r24
				flag = 0;
     846:	10 92 64 00 	sts	0x0064, r1
     84a:	b4 cc       	rjmp	.-1688   	; 0x1b4 <_Z4workv+0x126>
			}
			if (PIND & 1<< minus && flag && rpm > 40) {
				rpm -= 10;
     84c:	80 91 75 00 	lds	r24, 0x0075
     850:	90 91 76 00 	lds	r25, 0x0076
     854:	0a 97       	sbiw	r24, 0x0a	; 10
     856:	90 93 76 00 	sts	0x0076, r25
     85a:	80 93 75 00 	sts	0x0075, r24
				flag = 0;
     85e:	10 92 64 00 	sts	0x0064, r1
     862:	b5 cc       	rjmp	.-1686   	; 0x1ce <_Z4workv+0x140>

00000864 <main>:


int main(void)
{
	
	PORTC |= 1<<en1 | 1<<en2;
     864:	85 b3       	in	r24, 0x15	; 21
     866:	8c 60       	ori	r24, 0x0C	; 12
     868:	85 bb       	out	0x15, r24	; 21
	
	SREG |= 1<<7;
     86a:	8f b7       	in	r24, 0x3f	; 63
     86c:	80 68       	ori	r24, 0x80	; 128
     86e:	8f bf       	out	0x3f, r24	; 63
	
	DDRB = 0xff;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
     874:	84 bb       	out	0x14, r24	; 20
	DDRD = 0;
     876:	11 ba       	out	0x11, r1	; 17
	
	SPCR = 0b01010000; //SPI_enable_MSB_clk/4
     878:	80 e5       	ldi	r24, 0x50	; 80
     87a:	8d b9       	out	0x0d, r24	; 13
	
	TCCR1A = 0;
     87c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001010;
     87e:	8a e0       	ldi	r24, 0x0A	; 10
     880:	8e bd       	out	0x2e, r24	; 46
	
	TCCR2 = 0b00001100;
     882:	9c e0       	ldi	r25, 0x0C	; 12
     884:	95 bd       	out	0x25, r25	; 37
	
	r0 = r1 = r2 = r3 = r4 = r5 = r6 = r7 = 10;
     886:	80 93 8c 00 	sts	0x008C, r24
     88a:	80 93 8d 00 	sts	0x008D, r24
     88e:	80 93 8e 00 	sts	0x008E, r24
     892:	80 93 8f 00 	sts	0x008F, r24
     896:	80 93 90 00 	sts	0x0090, r24
     89a:	80 93 91 00 	sts	0x0091, r24
     89e:	80 93 92 00 	sts	0x0092, r24
     8a2:	80 93 93 00 	sts	0x0093, r24
	
	TCCR0 = 0b00000101;
     8a6:	85 e0       	ldi	r24, 0x05	; 5
     8a8:	83 bf       	out	0x33, r24	; 51
	

	TIMSK |= 1<<0;
     8aa:	89 b7       	in	r24, 0x39	; 57
     8ac:	81 60       	ori	r24, 0x01	; 1
     8ae:	89 bf       	out	0x39, r24	; 57
	{
		if (rpm > 450) rpm = 450;
		if (rpm < 40) rpm = 40;

		r0 = up/1000;
		r1 = up%1000/100;
     8b0:	48 ee       	ldi	r20, 0xE8	; 232
     8b2:	53 e0       	ldi	r21, 0x03	; 3
		r2 = up%1000%100/10;
     8b4:	0f 2e       	mov	r0, r31
     8b6:	f4 e6       	ldi	r31, 0x64	; 100
     8b8:	df 2e       	mov	r13, r31
     8ba:	f0 2d       	mov	r31, r0


		switch (mode) {
			case 0b00000001: up = N; dp1 = 0; break;
			case 0b00000010: up = N0; dp1 = 0; break;
			case 0b00000100: up = d100; dp1 = 1; break;
     8bc:	cc 24       	eor	r12, r12
     8be:	c3 94       	inc	r12
		
		
		
		
		
		data_out = mode | 1<<7 | 1<<(dir+4);
     8c0:	ee 24       	eor	r14, r14
     8c2:	e3 94       	inc	r14
     8c4:	f1 2c       	mov	r15, r1
			case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
			case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
			case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
			case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
			case 5: SPDR = mass[r5] | dp5<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000100; while(!(SPSR & (1<<SPIF))); break;
			case 6: SPDR = mass[r6] | dp6<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00001000; while(!(SPSR & (1<<SPIF))); break;
     8c6:	68 94       	set
     8c8:	aa 24       	eor	r10, r10
     8ca:	a3 f8       	bld	r10, 3
			case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
			case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
			case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
			case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
			case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
			case 5: SPDR = mass[r5] | dp5<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000100; while(!(SPSR & (1<<SPIF))); break;
     8cc:	68 94       	set
     8ce:	99 24       	eor	r9, r9
     8d0:	92 f8       	bld	r9, 2
		switch (r) {
			case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
			case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
			case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
			case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
			case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
     8d2:	68 94       	set
     8d4:	22 24       	eor	r2, r2
     8d6:	21 f8       	bld	r2, 1
		
		switch (r) {
			case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
			case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
			case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
			case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
     8d8:	68 94       	set
     8da:	33 24       	eor	r3, r3
     8dc:	34 f8       	bld	r3, 4

		
		switch (r) {
			case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
			case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
			case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
     8de:	68 94       	set
     8e0:	44 24       	eor	r4, r4
     8e2:	45 f8       	bld	r4, 5


		
		switch (r) {
			case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
			case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
     8e4:	68 94       	set
     8e6:	55 24       	eor	r5, r5
     8e8:	56 f8       	bld	r5, 6
		


		
		switch (r) {
			case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
     8ea:	68 94       	set
     8ec:	66 24       	eor	r6, r6
     8ee:	67 f8       	bld	r6, 7
	

	TIMSK |= 1<<0;
	while(1)
	{
		if (rpm > 450) rpm = 450;
     8f0:	02 ec       	ldi	r16, 0xC2	; 194
     8f2:	11 e0       	ldi	r17, 0x01	; 1
		if (rpm < 40) rpm = 40;
     8f4:	c8 e2       	ldi	r28, 0x28	; 40
     8f6:	d0 e0       	ldi	r29, 0x00	; 0

		r0 = up/1000;
		r1 = up%1000/100;
     8f8:	84 2e       	mov	r8, r20
     8fa:	75 2e       	mov	r7, r21


		switch (mode) {
			case 0b00000001: up = N; dp1 = 0; break;
			case 0b00000010: up = N0; dp1 = 0; break;
			case 0b00000100: up = d100; dp1 = 1; break;
     8fc:	bc 2c       	mov	r11, r12
	

	TIMSK |= 1<<0;
	while(1)
	{
		if (rpm > 450) rpm = 450;
     8fe:	80 91 75 00 	lds	r24, 0x0075
     902:	90 91 76 00 	lds	r25, 0x0076
     906:	83 3c       	cpi	r24, 0xC3	; 195
     908:	91 40       	sbci	r25, 0x01	; 1
     90a:	20 f0       	brcs	.+8      	; 0x914 <main+0xb0>
     90c:	10 93 76 00 	sts	0x0076, r17
     910:	00 93 75 00 	sts	0x0075, r16
		if (rpm < 40) rpm = 40;
     914:	80 91 75 00 	lds	r24, 0x0075
     918:	90 91 76 00 	lds	r25, 0x0076
     91c:	88 97       	sbiw	r24, 0x28	; 40
     91e:	20 f4       	brcc	.+8      	; 0x928 <main+0xc4>
     920:	d0 93 76 00 	sts	0x0076, r29
     924:	c0 93 75 00 	sts	0x0075, r28

		r0 = up/1000;
     928:	20 91 8a 00 	lds	r18, 0x008A
     92c:	30 91 8b 00 	lds	r19, 0x008B
     930:	36 95       	lsr	r19
     932:	27 95       	ror	r18
     934:	36 95       	lsr	r19
     936:	27 95       	ror	r18
     938:	36 95       	lsr	r19
     93a:	27 95       	ror	r18
     93c:	a5 ec       	ldi	r26, 0xC5	; 197
     93e:	b0 e2       	ldi	r27, 0x20	; 32
     940:	87 d6       	rcall	.+3342   	; 0x1650 <__umulhisi3>
     942:	92 95       	swap	r25
     944:	82 95       	swap	r24
     946:	8f 70       	andi	r24, 0x0F	; 15
     948:	89 27       	eor	r24, r25
     94a:	9f 70       	andi	r25, 0x0F	; 15
     94c:	89 27       	eor	r24, r25
     94e:	80 93 93 00 	sts	0x0093, r24
		r1 = up%1000/100;
     952:	e0 91 8a 00 	lds	r30, 0x008A
     956:	f0 91 8b 00 	lds	r31, 0x008B
     95a:	9f 01       	movw	r18, r30
     95c:	36 95       	lsr	r19
     95e:	27 95       	ror	r18
     960:	36 95       	lsr	r19
     962:	27 95       	ror	r18
     964:	36 95       	lsr	r19
     966:	27 95       	ror	r18
     968:	73 d6       	rcall	.+3302   	; 0x1650 <__umulhisi3>
     96a:	92 95       	swap	r25
     96c:	82 95       	swap	r24
     96e:	8f 70       	andi	r24, 0x0F	; 15
     970:	89 27       	eor	r24, r25
     972:	9f 70       	andi	r25, 0x0F	; 15
     974:	89 27       	eor	r24, r25
     976:	84 9f       	mul	r24, r20
     978:	90 01       	movw	r18, r0
     97a:	85 9f       	mul	r24, r21
     97c:	30 0d       	add	r19, r0
     97e:	94 9f       	mul	r25, r20
     980:	30 0d       	add	r19, r0
     982:	11 24       	eor	r1, r1
     984:	cf 01       	movw	r24, r30
     986:	82 1b       	sub	r24, r18
     988:	93 0b       	sbc	r25, r19
     98a:	9c 01       	movw	r18, r24
     98c:	36 95       	lsr	r19
     98e:	27 95       	ror	r18
     990:	36 95       	lsr	r19
     992:	27 95       	ror	r18
     994:	ab e7       	ldi	r26, 0x7B	; 123
     996:	b4 e1       	ldi	r27, 0x14	; 20
     998:	5b d6       	rcall	.+3254   	; 0x1650 <__umulhisi3>
     99a:	96 95       	lsr	r25
     99c:	87 95       	ror	r24
     99e:	80 93 92 00 	sts	0x0092, r24
		r2 = up%1000%100/10;
     9a2:	e0 91 8a 00 	lds	r30, 0x008A
     9a6:	f0 91 8b 00 	lds	r31, 0x008B
     9aa:	9f 01       	movw	r18, r30
     9ac:	36 95       	lsr	r19
     9ae:	27 95       	ror	r18
     9b0:	36 95       	lsr	r19
     9b2:	27 95       	ror	r18
     9b4:	36 95       	lsr	r19
     9b6:	27 95       	ror	r18
     9b8:	a5 ec       	ldi	r26, 0xC5	; 197
     9ba:	b0 e2       	ldi	r27, 0x20	; 32
     9bc:	49 d6       	rcall	.+3218   	; 0x1650 <__umulhisi3>
     9be:	92 95       	swap	r25
     9c0:	82 95       	swap	r24
     9c2:	8f 70       	andi	r24, 0x0F	; 15
     9c4:	89 27       	eor	r24, r25
     9c6:	9f 70       	andi	r25, 0x0F	; 15
     9c8:	89 27       	eor	r24, r25
     9ca:	84 9f       	mul	r24, r20
     9cc:	90 01       	movw	r18, r0
     9ce:	85 9f       	mul	r24, r21
     9d0:	30 0d       	add	r19, r0
     9d2:	94 9f       	mul	r25, r20
     9d4:	30 0d       	add	r19, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	e2 1b       	sub	r30, r18
     9da:	f3 0b       	sbc	r31, r19
     9dc:	9f 01       	movw	r18, r30
     9de:	36 95       	lsr	r19
     9e0:	27 95       	ror	r18
     9e2:	36 95       	lsr	r19
     9e4:	27 95       	ror	r18
     9e6:	ab e7       	ldi	r26, 0x7B	; 123
     9e8:	b4 e1       	ldi	r27, 0x14	; 20
     9ea:	32 d6       	rcall	.+3172   	; 0x1650 <__umulhisi3>
     9ec:	96 95       	lsr	r25
     9ee:	87 95       	ror	r24
     9f0:	d8 9e       	mul	r13, r24
     9f2:	90 01       	movw	r18, r0
     9f4:	d9 9e       	mul	r13, r25
     9f6:	30 0d       	add	r19, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	cf 01       	movw	r24, r30
     9fc:	82 1b       	sub	r24, r18
     9fe:	93 0b       	sbc	r25, r19
     a00:	9c 01       	movw	r18, r24
     a02:	ad ec       	ldi	r26, 0xCD	; 205
     a04:	bc ec       	ldi	r27, 0xCC	; 204
     a06:	24 d6       	rcall	.+3144   	; 0x1650 <__umulhisi3>
     a08:	96 95       	lsr	r25
     a0a:	87 95       	ror	r24
     a0c:	96 95       	lsr	r25
     a0e:	87 95       	ror	r24
     a10:	96 95       	lsr	r25
     a12:	87 95       	ror	r24
     a14:	80 93 91 00 	sts	0x0091, r24
		r3 = up%1000%100%10;
     a18:	e0 91 8a 00 	lds	r30, 0x008A
     a1c:	f0 91 8b 00 	lds	r31, 0x008B
     a20:	9f 01       	movw	r18, r30
     a22:	36 95       	lsr	r19
     a24:	27 95       	ror	r18
     a26:	36 95       	lsr	r19
     a28:	27 95       	ror	r18
     a2a:	36 95       	lsr	r19
     a2c:	27 95       	ror	r18
     a2e:	a5 ec       	ldi	r26, 0xC5	; 197
     a30:	b0 e2       	ldi	r27, 0x20	; 32
     a32:	0e d6       	rcall	.+3100   	; 0x1650 <__umulhisi3>
     a34:	92 95       	swap	r25
     a36:	82 95       	swap	r24
     a38:	8f 70       	andi	r24, 0x0F	; 15
     a3a:	89 27       	eor	r24, r25
     a3c:	9f 70       	andi	r25, 0x0F	; 15
     a3e:	89 27       	eor	r24, r25
     a40:	84 9f       	mul	r24, r20
     a42:	90 01       	movw	r18, r0
     a44:	85 9f       	mul	r24, r21
     a46:	30 0d       	add	r19, r0
     a48:	94 9f       	mul	r25, r20
     a4a:	30 0d       	add	r19, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	e2 1b       	sub	r30, r18
     a50:	f3 0b       	sbc	r31, r19
     a52:	9f 01       	movw	r18, r30
     a54:	36 95       	lsr	r19
     a56:	27 95       	ror	r18
     a58:	36 95       	lsr	r19
     a5a:	27 95       	ror	r18
     a5c:	ab e7       	ldi	r26, 0x7B	; 123
     a5e:	b4 e1       	ldi	r27, 0x14	; 20
     a60:	f7 d5       	rcall	.+3054   	; 0x1650 <__umulhisi3>
     a62:	96 95       	lsr	r25
     a64:	87 95       	ror	r24
     a66:	d8 9e       	mul	r13, r24
     a68:	90 01       	movw	r18, r0
     a6a:	d9 9e       	mul	r13, r25
     a6c:	30 0d       	add	r19, r0
     a6e:	11 24       	eor	r1, r1
     a70:	e2 1b       	sub	r30, r18
     a72:	f3 0b       	sbc	r31, r19
     a74:	9f 01       	movw	r18, r30
     a76:	ad ec       	ldi	r26, 0xCD	; 205
     a78:	bc ec       	ldi	r27, 0xCC	; 204
     a7a:	ea d5       	rcall	.+3028   	; 0x1650 <__umulhisi3>
     a7c:	96 95       	lsr	r25
     a7e:	87 95       	ror	r24
     a80:	96 95       	lsr	r25
     a82:	87 95       	ror	r24
     a84:	96 95       	lsr	r25
     a86:	87 95       	ror	r24
     a88:	9c 01       	movw	r18, r24
     a8a:	22 0f       	add	r18, r18
     a8c:	33 1f       	adc	r19, r19
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	82 0f       	add	r24, r18
     a9c:	93 1f       	adc	r25, r19
     a9e:	e8 1b       	sub	r30, r24
     aa0:	f9 0b       	sbc	r31, r25
     aa2:	e0 93 90 00 	sts	0x0090, r30
		r4 = down/1000;
     aa6:	20 91 88 00 	lds	r18, 0x0088
     aaa:	30 91 89 00 	lds	r19, 0x0089
     aae:	36 95       	lsr	r19
     ab0:	27 95       	ror	r18
     ab2:	36 95       	lsr	r19
     ab4:	27 95       	ror	r18
     ab6:	36 95       	lsr	r19
     ab8:	27 95       	ror	r18
     aba:	a5 ec       	ldi	r26, 0xC5	; 197
     abc:	b0 e2       	ldi	r27, 0x20	; 32
     abe:	c8 d5       	rcall	.+2960   	; 0x1650 <__umulhisi3>
     ac0:	92 95       	swap	r25
     ac2:	82 95       	swap	r24
     ac4:	8f 70       	andi	r24, 0x0F	; 15
     ac6:	89 27       	eor	r24, r25
     ac8:	9f 70       	andi	r25, 0x0F	; 15
     aca:	89 27       	eor	r24, r25
     acc:	80 93 8f 00 	sts	0x008F, r24
		r5 = down%1000/100;
     ad0:	e0 91 88 00 	lds	r30, 0x0088
     ad4:	f0 91 89 00 	lds	r31, 0x0089
     ad8:	9f 01       	movw	r18, r30
     ada:	36 95       	lsr	r19
     adc:	27 95       	ror	r18
     ade:	36 95       	lsr	r19
     ae0:	27 95       	ror	r18
     ae2:	36 95       	lsr	r19
     ae4:	27 95       	ror	r18
     ae6:	b4 d5       	rcall	.+2920   	; 0x1650 <__umulhisi3>
     ae8:	92 95       	swap	r25
     aea:	82 95       	swap	r24
     aec:	8f 70       	andi	r24, 0x0F	; 15
     aee:	89 27       	eor	r24, r25
     af0:	9f 70       	andi	r25, 0x0F	; 15
     af2:	89 27       	eor	r24, r25
     af4:	84 9f       	mul	r24, r20
     af6:	90 01       	movw	r18, r0
     af8:	85 9f       	mul	r24, r21
     afa:	30 0d       	add	r19, r0
     afc:	94 9f       	mul	r25, r20
     afe:	30 0d       	add	r19, r0
     b00:	11 24       	eor	r1, r1
     b02:	cf 01       	movw	r24, r30
     b04:	82 1b       	sub	r24, r18
     b06:	93 0b       	sbc	r25, r19
     b08:	9c 01       	movw	r18, r24
     b0a:	36 95       	lsr	r19
     b0c:	27 95       	ror	r18
     b0e:	36 95       	lsr	r19
     b10:	27 95       	ror	r18
     b12:	ab e7       	ldi	r26, 0x7B	; 123
     b14:	b4 e1       	ldi	r27, 0x14	; 20
     b16:	9c d5       	rcall	.+2872   	; 0x1650 <__umulhisi3>
     b18:	96 95       	lsr	r25
     b1a:	87 95       	ror	r24
     b1c:	80 93 8e 00 	sts	0x008E, r24
		r6 = down%1000%100/10;
     b20:	e0 91 88 00 	lds	r30, 0x0088
     b24:	f0 91 89 00 	lds	r31, 0x0089
     b28:	9f 01       	movw	r18, r30
     b2a:	36 95       	lsr	r19
     b2c:	27 95       	ror	r18
     b2e:	36 95       	lsr	r19
     b30:	27 95       	ror	r18
     b32:	36 95       	lsr	r19
     b34:	27 95       	ror	r18
     b36:	a5 ec       	ldi	r26, 0xC5	; 197
     b38:	b0 e2       	ldi	r27, 0x20	; 32
     b3a:	8a d5       	rcall	.+2836   	; 0x1650 <__umulhisi3>
     b3c:	92 95       	swap	r25
     b3e:	82 95       	swap	r24
     b40:	8f 70       	andi	r24, 0x0F	; 15
     b42:	89 27       	eor	r24, r25
     b44:	9f 70       	andi	r25, 0x0F	; 15
     b46:	89 27       	eor	r24, r25
     b48:	84 9f       	mul	r24, r20
     b4a:	90 01       	movw	r18, r0
     b4c:	85 9f       	mul	r24, r21
     b4e:	30 0d       	add	r19, r0
     b50:	94 9f       	mul	r25, r20
     b52:	30 0d       	add	r19, r0
     b54:	11 24       	eor	r1, r1
     b56:	e2 1b       	sub	r30, r18
     b58:	f3 0b       	sbc	r31, r19
     b5a:	9f 01       	movw	r18, r30
     b5c:	36 95       	lsr	r19
     b5e:	27 95       	ror	r18
     b60:	36 95       	lsr	r19
     b62:	27 95       	ror	r18
     b64:	ab e7       	ldi	r26, 0x7B	; 123
     b66:	b4 e1       	ldi	r27, 0x14	; 20
     b68:	73 d5       	rcall	.+2790   	; 0x1650 <__umulhisi3>
     b6a:	96 95       	lsr	r25
     b6c:	87 95       	ror	r24
     b6e:	d8 9e       	mul	r13, r24
     b70:	90 01       	movw	r18, r0
     b72:	d9 9e       	mul	r13, r25
     b74:	30 0d       	add	r19, r0
     b76:	11 24       	eor	r1, r1
     b78:	cf 01       	movw	r24, r30
     b7a:	82 1b       	sub	r24, r18
     b7c:	93 0b       	sbc	r25, r19
     b7e:	9c 01       	movw	r18, r24
     b80:	ad ec       	ldi	r26, 0xCD	; 205
     b82:	bc ec       	ldi	r27, 0xCC	; 204
     b84:	65 d5       	rcall	.+2762   	; 0x1650 <__umulhisi3>
     b86:	96 95       	lsr	r25
     b88:	87 95       	ror	r24
     b8a:	96 95       	lsr	r25
     b8c:	87 95       	ror	r24
     b8e:	96 95       	lsr	r25
     b90:	87 95       	ror	r24
     b92:	80 93 8d 00 	sts	0x008D, r24
		r7 = down%1000%100%10;
     b96:	e0 91 88 00 	lds	r30, 0x0088
     b9a:	f0 91 89 00 	lds	r31, 0x0089
     b9e:	9f 01       	movw	r18, r30
     ba0:	36 95       	lsr	r19
     ba2:	27 95       	ror	r18
     ba4:	36 95       	lsr	r19
     ba6:	27 95       	ror	r18
     ba8:	36 95       	lsr	r19
     baa:	27 95       	ror	r18
     bac:	a5 ec       	ldi	r26, 0xC5	; 197
     bae:	b0 e2       	ldi	r27, 0x20	; 32
     bb0:	4f d5       	rcall	.+2718   	; 0x1650 <__umulhisi3>
     bb2:	92 95       	swap	r25
     bb4:	82 95       	swap	r24
     bb6:	8f 70       	andi	r24, 0x0F	; 15
     bb8:	89 27       	eor	r24, r25
     bba:	9f 70       	andi	r25, 0x0F	; 15
     bbc:	89 27       	eor	r24, r25
     bbe:	84 9f       	mul	r24, r20
     bc0:	90 01       	movw	r18, r0
     bc2:	85 9f       	mul	r24, r21
     bc4:	30 0d       	add	r19, r0
     bc6:	94 9f       	mul	r25, r20
     bc8:	30 0d       	add	r19, r0
     bca:	11 24       	eor	r1, r1
     bcc:	e2 1b       	sub	r30, r18
     bce:	f3 0b       	sbc	r31, r19
     bd0:	9f 01       	movw	r18, r30
     bd2:	36 95       	lsr	r19
     bd4:	27 95       	ror	r18
     bd6:	36 95       	lsr	r19
     bd8:	27 95       	ror	r18
     bda:	ab e7       	ldi	r26, 0x7B	; 123
     bdc:	b4 e1       	ldi	r27, 0x14	; 20
     bde:	38 d5       	rcall	.+2672   	; 0x1650 <__umulhisi3>
     be0:	96 95       	lsr	r25
     be2:	87 95       	ror	r24
     be4:	d8 9e       	mul	r13, r24
     be6:	90 01       	movw	r18, r0
     be8:	d9 9e       	mul	r13, r25
     bea:	30 0d       	add	r19, r0
     bec:	11 24       	eor	r1, r1
     bee:	e2 1b       	sub	r30, r18
     bf0:	f3 0b       	sbc	r31, r19
     bf2:	9f 01       	movw	r18, r30
     bf4:	ad ec       	ldi	r26, 0xCD	; 205
     bf6:	bc ec       	ldi	r27, 0xCC	; 204
     bf8:	2b d5       	rcall	.+2646   	; 0x1650 <__umulhisi3>
     bfa:	96 95       	lsr	r25
     bfc:	87 95       	ror	r24
     bfe:	96 95       	lsr	r25
     c00:	87 95       	ror	r24
     c02:	96 95       	lsr	r25
     c04:	87 95       	ror	r24
     c06:	9c 01       	movw	r18, r24
     c08:	22 0f       	add	r18, r18
     c0a:	33 1f       	adc	r19, r19
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	82 0f       	add	r24, r18
     c1a:	93 1f       	adc	r25, r19
     c1c:	e8 1b       	sub	r30, r24
     c1e:	f9 0b       	sbc	r31, r25
     c20:	e0 93 8c 00 	sts	0x008C, r30


		switch (mode) {
     c24:	20 91 61 00 	lds	r18, 0x0061
     c28:	22 30       	cpi	r18, 0x02	; 2
     c2a:	a1 f0       	breq	.+40     	; 0xc54 <main+0x3f0>
     c2c:	18 f4       	brcc	.+6      	; 0xc34 <main+0x3d0>
     c2e:	21 30       	cpi	r18, 0x01	; 1
     c30:	31 f0       	breq	.+12     	; 0xc3e <main+0x3da>
     c32:	34 c0       	rjmp	.+104    	; 0xc9c <main+0x438>
     c34:	24 30       	cpi	r18, 0x04	; 4
     c36:	c9 f0       	breq	.+50     	; 0xc6a <main+0x406>
     c38:	28 30       	cpi	r18, 0x08	; 8
     c3a:	11 f1       	breq	.+68     	; 0xc80 <main+0x41c>
     c3c:	2f c0       	rjmp	.+94     	; 0xc9c <main+0x438>
			case 0b00000001: up = N; dp1 = 0; break;
     c3e:	80 91 96 00 	lds	r24, 0x0096
     c42:	90 91 97 00 	lds	r25, 0x0097
     c46:	90 93 8b 00 	sts	0x008B, r25
     c4a:	80 93 8a 00 	sts	0x008A, r24
     c4e:	10 92 86 00 	sts	0x0086, r1
     c52:	24 c0       	rjmp	.+72     	; 0xc9c <main+0x438>
			case 0b00000010: up = N0; dp1 = 0; break;
     c54:	80 91 94 00 	lds	r24, 0x0094
     c58:	90 91 95 00 	lds	r25, 0x0095
     c5c:	90 93 8b 00 	sts	0x008B, r25
     c60:	80 93 8a 00 	sts	0x008A, r24
     c64:	10 92 86 00 	sts	0x0086, r1
     c68:	19 c0       	rjmp	.+50     	; 0xc9c <main+0x438>
			case 0b00000100: up = d100; dp1 = 1; break;
     c6a:	80 91 9d 00 	lds	r24, 0x009D
     c6e:	90 91 9e 00 	lds	r25, 0x009E
     c72:	90 93 8b 00 	sts	0x008B, r25
     c76:	80 93 8a 00 	sts	0x008A, r24
     c7a:	b0 92 86 00 	sts	0x0086, r11
     c7e:	0e c0       	rjmp	.+28     	; 0xc9c <main+0x438>
			case 0b00001000: rpm = up = rpm; dp1 = 0; break;
     c80:	80 91 75 00 	lds	r24, 0x0075
     c84:	90 91 76 00 	lds	r25, 0x0076
     c88:	90 93 8b 00 	sts	0x008B, r25
     c8c:	80 93 8a 00 	sts	0x008A, r24
     c90:	90 93 76 00 	sts	0x0076, r25
     c94:	80 93 75 00 	sts	0x0075, r24
     c98:	10 92 86 00 	sts	0x0086, r1
		}

		
		if (PIND & 1<<plus && flag) {
     c9c:	80 9b       	sbis	0x10, 0	; 16
     c9e:	5d c0       	rjmp	.+186    	; 0xd5a <main+0x4f6>
     ca0:	80 91 64 00 	lds	r24, 0x0064
     ca4:	81 11       	cpse	r24, r1
     ca6:	6d c3       	rjmp	.+1754   	; 0x1382 <main+0xb1e>
     ca8:	58 c0       	rjmp	.+176    	; 0xd5a <main+0x4f6>
			switch (mode) {
				case 0b00000001: N = N + k; up = N; break;
     caa:	60 91 96 00 	lds	r22, 0x0096
     cae:	70 91 97 00 	lds	r23, 0x0097
     cb2:	80 91 62 00 	lds	r24, 0x0062
     cb6:	90 91 63 00 	lds	r25, 0x0063
     cba:	86 0f       	add	r24, r22
     cbc:	97 1f       	adc	r25, r23
     cbe:	90 93 97 00 	sts	0x0097, r25
     cc2:	80 93 96 00 	sts	0x0096, r24
     cc6:	80 91 96 00 	lds	r24, 0x0096
     cca:	90 91 97 00 	lds	r25, 0x0097
     cce:	90 93 8b 00 	sts	0x008B, r25
     cd2:	80 93 8a 00 	sts	0x008A, r24
     cd6:	3f c0       	rjmp	.+126    	; 0xd56 <main+0x4f2>
				case 0b00000010: N0 = N0+k; up = N0; break;
     cd8:	60 91 94 00 	lds	r22, 0x0094
     cdc:	70 91 95 00 	lds	r23, 0x0095
     ce0:	80 91 62 00 	lds	r24, 0x0062
     ce4:	90 91 63 00 	lds	r25, 0x0063
     ce8:	86 0f       	add	r24, r22
     cea:	97 1f       	adc	r25, r23
     cec:	90 93 95 00 	sts	0x0095, r25
     cf0:	80 93 94 00 	sts	0x0094, r24
     cf4:	80 91 94 00 	lds	r24, 0x0094
     cf8:	90 91 95 00 	lds	r25, 0x0095
     cfc:	90 93 8b 00 	sts	0x008B, r25
     d00:	80 93 8a 00 	sts	0x008A, r24
     d04:	28 c0       	rjmp	.+80     	; 0xd56 <main+0x4f2>
				case 0b00000100: d100 = d100+k; up = d100; break;
     d06:	60 91 9d 00 	lds	r22, 0x009D
     d0a:	70 91 9e 00 	lds	r23, 0x009E
     d0e:	80 91 62 00 	lds	r24, 0x0062
     d12:	90 91 63 00 	lds	r25, 0x0063
     d16:	86 0f       	add	r24, r22
     d18:	97 1f       	adc	r25, r23
     d1a:	90 93 9e 00 	sts	0x009E, r25
     d1e:	80 93 9d 00 	sts	0x009D, r24
     d22:	80 91 9d 00 	lds	r24, 0x009D
     d26:	90 91 9e 00 	lds	r25, 0x009E
     d2a:	90 93 8b 00 	sts	0x008B, r25
     d2e:	80 93 8a 00 	sts	0x008A, r24
     d32:	11 c0       	rjmp	.+34     	; 0xd56 <main+0x4f2>
				case 0b00001000: rpm = rpm+10; up = rpm; break;
     d34:	80 91 75 00 	lds	r24, 0x0075
     d38:	90 91 76 00 	lds	r25, 0x0076
     d3c:	0a 96       	adiw	r24, 0x0a	; 10
     d3e:	90 93 76 00 	sts	0x0076, r25
     d42:	80 93 75 00 	sts	0x0075, r24
     d46:	80 91 75 00 	lds	r24, 0x0075
     d4a:	90 91 76 00 	lds	r25, 0x0076
     d4e:	90 93 8b 00 	sts	0x008B, r25
     d52:	80 93 8a 00 	sts	0x008A, r24
			}
			flag = 0;
     d56:	10 92 64 00 	sts	0x0064, r1
		}
		
		
		if (PIND & 1<<minus && flag) {
     d5a:	81 9b       	sbis	0x10, 1	; 16
     d5c:	5d c0       	rjmp	.+186    	; 0xe18 <main+0x5b4>
     d5e:	80 91 64 00 	lds	r24, 0x0064
     d62:	81 11       	cpse	r24, r1
     d64:	1d c3       	rjmp	.+1594   	; 0x13a0 <main+0xb3c>
     d66:	58 c0       	rjmp	.+176    	; 0xe18 <main+0x5b4>
			switch (mode) {
				case 0b00000001: N = N - k; up = N; break;
     d68:	80 91 96 00 	lds	r24, 0x0096
     d6c:	90 91 97 00 	lds	r25, 0x0097
     d70:	60 91 62 00 	lds	r22, 0x0062
     d74:	70 91 63 00 	lds	r23, 0x0063
     d78:	86 1b       	sub	r24, r22
     d7a:	97 0b       	sbc	r25, r23
     d7c:	90 93 97 00 	sts	0x0097, r25
     d80:	80 93 96 00 	sts	0x0096, r24
     d84:	80 91 96 00 	lds	r24, 0x0096
     d88:	90 91 97 00 	lds	r25, 0x0097
     d8c:	90 93 8b 00 	sts	0x008B, r25
     d90:	80 93 8a 00 	sts	0x008A, r24
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <main+0x5b0>
				case 0b00000010: N0 = N0 - k; up = N0; break;
     d96:	80 91 94 00 	lds	r24, 0x0094
     d9a:	90 91 95 00 	lds	r25, 0x0095
     d9e:	60 91 62 00 	lds	r22, 0x0062
     da2:	70 91 63 00 	lds	r23, 0x0063
     da6:	86 1b       	sub	r24, r22
     da8:	97 0b       	sbc	r25, r23
     daa:	90 93 95 00 	sts	0x0095, r25
     dae:	80 93 94 00 	sts	0x0094, r24
     db2:	80 91 94 00 	lds	r24, 0x0094
     db6:	90 91 95 00 	lds	r25, 0x0095
     dba:	90 93 8b 00 	sts	0x008B, r25
     dbe:	80 93 8a 00 	sts	0x008A, r24
     dc2:	28 c0       	rjmp	.+80     	; 0xe14 <main+0x5b0>
				case 0b00000100: d100 = d100 - k; up = d100; break;
     dc4:	80 91 9d 00 	lds	r24, 0x009D
     dc8:	90 91 9e 00 	lds	r25, 0x009E
     dcc:	60 91 62 00 	lds	r22, 0x0062
     dd0:	70 91 63 00 	lds	r23, 0x0063
     dd4:	86 1b       	sub	r24, r22
     dd6:	97 0b       	sbc	r25, r23
     dd8:	90 93 9e 00 	sts	0x009E, r25
     ddc:	80 93 9d 00 	sts	0x009D, r24
     de0:	80 91 9d 00 	lds	r24, 0x009D
     de4:	90 91 9e 00 	lds	r25, 0x009E
     de8:	90 93 8b 00 	sts	0x008B, r25
     dec:	80 93 8a 00 	sts	0x008A, r24
     df0:	11 c0       	rjmp	.+34     	; 0xe14 <main+0x5b0>
				case 0b00001000: rpm = rpm - 10; up = rpm; break;
     df2:	80 91 75 00 	lds	r24, 0x0075
     df6:	90 91 76 00 	lds	r25, 0x0076
     dfa:	0a 97       	sbiw	r24, 0x0a	; 10
     dfc:	90 93 76 00 	sts	0x0076, r25
     e00:	80 93 75 00 	sts	0x0075, r24
     e04:	80 91 75 00 	lds	r24, 0x0075
     e08:	90 91 76 00 	lds	r25, 0x0076
     e0c:	90 93 8b 00 	sts	0x008B, r25
     e10:	80 93 8a 00 	sts	0x008A, r24
			}
			flag = 0;
     e14:	10 92 64 00 	sts	0x0064, r1
		}
		
		
		if (PIND & 1<<enter && flag) {
     e18:	84 9b       	sbis	0x10, 4	; 16
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <main+0x5c0>
     e1c:	80 91 64 00 	lds	r24, 0x0064
     e20:	81 11       	cpse	r24, r1
     e22:	cd c2       	rjmp	.+1434   	; 0x13be <main+0xb5a>
			mode <<= 1;
			flag = 0;
		}
		if (mode > 0b00001000) {
     e24:	80 91 61 00 	lds	r24, 0x0061
     e28:	89 30       	cpi	r24, 0x09	; 9
     e2a:	10 f0       	brcs	.+4      	; 0xe30 <main+0x5cc>
			mode = 0b00000001;
     e2c:	b0 92 61 00 	sts	0x0061, r11
		}
		
		
		if (PIND & 1<< razryad && flag) {
     e30:	85 9b       	sbis	0x10, 5	; 16
     e32:	1c c0       	rjmp	.+56     	; 0xe6c <main+0x608>
     e34:	80 91 64 00 	lds	r24, 0x0064
     e38:	81 11       	cpse	r24, r1
     e3a:	c7 c2       	rjmp	.+1422   	; 0x13ca <main+0xb66>
     e3c:	17 c0       	rjmp	.+46     	; 0xe6c <main+0x608>
			if (k == 1) k = 1000;
     e3e:	80 92 62 00 	sts	0x0062, r8
     e42:	70 92 63 00 	sts	0x0063, r7
			k /= 10;
     e46:	20 91 62 00 	lds	r18, 0x0062
     e4a:	30 91 63 00 	lds	r19, 0x0063
     e4e:	ad ec       	ldi	r26, 0xCD	; 205
     e50:	bc ec       	ldi	r27, 0xCC	; 204
     e52:	fe d3       	rcall	.+2044   	; 0x1650 <__umulhisi3>
     e54:	96 95       	lsr	r25
     e56:	87 95       	ror	r24
     e58:	96 95       	lsr	r25
     e5a:	87 95       	ror	r24
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	90 93 63 00 	sts	0x0063, r25
     e64:	80 93 62 00 	sts	0x0062, r24
			flag = 0;
     e68:	10 92 64 00 	sts	0x0064, r1
		}
		
		
		if (PIND & 1<< dir_button && flag) {
     e6c:	86 9b       	sbis	0x10, 6	; 16
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <main+0x614>
     e70:	80 91 64 00 	lds	r24, 0x0064
     e74:	81 11       	cpse	r24, r1
     e76:	b1 c2       	rjmp	.+1378   	; 0x13da <main+0xb76>
			dir = !dir;
			flag = 0;
		}
		
		if (PIND & 1<<play && flag) {
     e78:	87 9b       	sbis	0x10, 7	; 16
     e7a:	cb c2       	rjmp	.+1430   	; 0x1412 <main+0xbae>
     e7c:	80 91 64 00 	lds	r24, 0x0064
     e80:	88 23       	and	r24, r24
     e82:	09 f4       	brne	.+2      	; 0xe86 <main+0x622>
     e84:	c6 c2       	rjmp	.+1420   	; 0x1412 <main+0xbae>
     e86:	b1 c2       	rjmp	.+1378   	; 0x13ea <main+0xb86>
			dp1 = 0;
			data_out = 0b01000000 | 1<<(dir+4);
			work();
		}
		
		if (PIND & 1<<razryad && PIND & 1<<enter) {
     e88:	84 9b       	sbis	0x10, 4	; 16
     e8a:	c5 c2       	rjmp	.+1418   	; 0x1416 <main+0xbb2>
     e8c:	e1 c2       	rjmp	.+1474   	; 0x1450 <main+0xbec>
			TIMSK |= 1<<7;
			PORTC &= ~(1<<en1);
			accel22 = 4000;
			dp1 = 0;
			while (1) {
				r0 = up/1000;
     e8e:	20 91 8a 00 	lds	r18, 0x008A
     e92:	30 91 8b 00 	lds	r19, 0x008B
     e96:	36 95       	lsr	r19
     e98:	27 95       	ror	r18
     e9a:	36 95       	lsr	r19
     e9c:	27 95       	ror	r18
     e9e:	36 95       	lsr	r19
     ea0:	27 95       	ror	r18
     ea2:	a5 ec       	ldi	r26, 0xC5	; 197
     ea4:	b0 e2       	ldi	r27, 0x20	; 32
     ea6:	d4 d3       	rcall	.+1960   	; 0x1650 <__umulhisi3>
     ea8:	92 95       	swap	r25
     eaa:	82 95       	swap	r24
     eac:	8f 70       	andi	r24, 0x0F	; 15
     eae:	89 27       	eor	r24, r25
     eb0:	9f 70       	andi	r25, 0x0F	; 15
     eb2:	89 27       	eor	r24, r25
     eb4:	80 93 93 00 	sts	0x0093, r24
				r1 = up%1000/100;
     eb8:	40 91 8a 00 	lds	r20, 0x008A
     ebc:	50 91 8b 00 	lds	r21, 0x008B
     ec0:	9a 01       	movw	r18, r20
     ec2:	36 95       	lsr	r19
     ec4:	27 95       	ror	r18
     ec6:	36 95       	lsr	r19
     ec8:	27 95       	ror	r18
     eca:	36 95       	lsr	r19
     ecc:	27 95       	ror	r18
     ece:	c0 d3       	rcall	.+1920   	; 0x1650 <__umulhisi3>
     ed0:	92 95       	swap	r25
     ed2:	82 95       	swap	r24
     ed4:	8f 70       	andi	r24, 0x0F	; 15
     ed6:	89 27       	eor	r24, r25
     ed8:	9f 70       	andi	r25, 0x0F	; 15
     eda:	89 27       	eor	r24, r25
     edc:	8e 9f       	mul	r24, r30
     ede:	90 01       	movw	r18, r0
     ee0:	8f 9f       	mul	r24, r31
     ee2:	30 0d       	add	r19, r0
     ee4:	9e 9f       	mul	r25, r30
     ee6:	30 0d       	add	r19, r0
     ee8:	11 24       	eor	r1, r1
     eea:	42 1b       	sub	r20, r18
     eec:	53 0b       	sbc	r21, r19
     eee:	9a 01       	movw	r18, r20
     ef0:	36 95       	lsr	r19
     ef2:	27 95       	ror	r18
     ef4:	36 95       	lsr	r19
     ef6:	27 95       	ror	r18
     ef8:	ab e7       	ldi	r26, 0x7B	; 123
     efa:	b4 e1       	ldi	r27, 0x14	; 20
     efc:	a9 d3       	rcall	.+1874   	; 0x1650 <__umulhisi3>
     efe:	96 95       	lsr	r25
     f00:	87 95       	ror	r24
     f02:	80 93 92 00 	sts	0x0092, r24
				r2 = up%1000%100/10;
     f06:	40 91 8a 00 	lds	r20, 0x008A
     f0a:	50 91 8b 00 	lds	r21, 0x008B
     f0e:	9a 01       	movw	r18, r20
     f10:	36 95       	lsr	r19
     f12:	27 95       	ror	r18
     f14:	36 95       	lsr	r19
     f16:	27 95       	ror	r18
     f18:	36 95       	lsr	r19
     f1a:	27 95       	ror	r18
     f1c:	a5 ec       	ldi	r26, 0xC5	; 197
     f1e:	b0 e2       	ldi	r27, 0x20	; 32
     f20:	97 d3       	rcall	.+1838   	; 0x1650 <__umulhisi3>
     f22:	92 95       	swap	r25
     f24:	82 95       	swap	r24
     f26:	8f 70       	andi	r24, 0x0F	; 15
     f28:	89 27       	eor	r24, r25
     f2a:	9f 70       	andi	r25, 0x0F	; 15
     f2c:	89 27       	eor	r24, r25
     f2e:	8e 9f       	mul	r24, r30
     f30:	90 01       	movw	r18, r0
     f32:	8f 9f       	mul	r24, r31
     f34:	30 0d       	add	r19, r0
     f36:	9e 9f       	mul	r25, r30
     f38:	30 0d       	add	r19, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	42 1b       	sub	r20, r18
     f3e:	53 0b       	sbc	r21, r19
     f40:	9a 01       	movw	r18, r20
     f42:	36 95       	lsr	r19
     f44:	27 95       	ror	r18
     f46:	36 95       	lsr	r19
     f48:	27 95       	ror	r18
     f4a:	ab e7       	ldi	r26, 0x7B	; 123
     f4c:	b4 e1       	ldi	r27, 0x14	; 20
     f4e:	80 d3       	rcall	.+1792   	; 0x1650 <__umulhisi3>
     f50:	96 95       	lsr	r25
     f52:	87 95       	ror	r24
     f54:	18 9f       	mul	r17, r24
     f56:	90 01       	movw	r18, r0
     f58:	19 9f       	mul	r17, r25
     f5a:	30 0d       	add	r19, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	ca 01       	movw	r24, r20
     f60:	82 1b       	sub	r24, r18
     f62:	93 0b       	sbc	r25, r19
     f64:	9c 01       	movw	r18, r24
     f66:	ad ec       	ldi	r26, 0xCD	; 205
     f68:	bc ec       	ldi	r27, 0xCC	; 204
     f6a:	72 d3       	rcall	.+1764   	; 0x1650 <__umulhisi3>
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	96 95       	lsr	r25
     f76:	87 95       	ror	r24
     f78:	80 93 91 00 	sts	0x0091, r24
				r3 = up%1000%100%10;
     f7c:	40 91 8a 00 	lds	r20, 0x008A
     f80:	50 91 8b 00 	lds	r21, 0x008B
     f84:	9a 01       	movw	r18, r20
     f86:	36 95       	lsr	r19
     f88:	27 95       	ror	r18
     f8a:	36 95       	lsr	r19
     f8c:	27 95       	ror	r18
     f8e:	36 95       	lsr	r19
     f90:	27 95       	ror	r18
     f92:	a5 ec       	ldi	r26, 0xC5	; 197
     f94:	b0 e2       	ldi	r27, 0x20	; 32
     f96:	5c d3       	rcall	.+1720   	; 0x1650 <__umulhisi3>
     f98:	92 95       	swap	r25
     f9a:	82 95       	swap	r24
     f9c:	8f 70       	andi	r24, 0x0F	; 15
     f9e:	89 27       	eor	r24, r25
     fa0:	9f 70       	andi	r25, 0x0F	; 15
     fa2:	89 27       	eor	r24, r25
     fa4:	8e 9f       	mul	r24, r30
     fa6:	90 01       	movw	r18, r0
     fa8:	8f 9f       	mul	r24, r31
     faa:	30 0d       	add	r19, r0
     fac:	9e 9f       	mul	r25, r30
     fae:	30 0d       	add	r19, r0
     fb0:	11 24       	eor	r1, r1
     fb2:	42 1b       	sub	r20, r18
     fb4:	53 0b       	sbc	r21, r19
     fb6:	9a 01       	movw	r18, r20
     fb8:	36 95       	lsr	r19
     fba:	27 95       	ror	r18
     fbc:	36 95       	lsr	r19
     fbe:	27 95       	ror	r18
     fc0:	ab e7       	ldi	r26, 0x7B	; 123
     fc2:	b4 e1       	ldi	r27, 0x14	; 20
     fc4:	45 d3       	rcall	.+1674   	; 0x1650 <__umulhisi3>
     fc6:	96 95       	lsr	r25
     fc8:	87 95       	ror	r24
     fca:	18 9f       	mul	r17, r24
     fcc:	90 01       	movw	r18, r0
     fce:	19 9f       	mul	r17, r25
     fd0:	30 0d       	add	r19, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	42 1b       	sub	r20, r18
     fd6:	53 0b       	sbc	r21, r19
     fd8:	9a 01       	movw	r18, r20
     fda:	ad ec       	ldi	r26, 0xCD	; 205
     fdc:	bc ec       	ldi	r27, 0xCC	; 204
     fde:	38 d3       	rcall	.+1648   	; 0x1650 <__umulhisi3>
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	96 95       	lsr	r25
     fe6:	87 95       	ror	r24
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	9c 01       	movw	r18, r24
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	82 0f       	add	r24, r18
    1000:	93 1f       	adc	r25, r19
    1002:	48 1b       	sub	r20, r24
    1004:	59 0b       	sbc	r21, r25
    1006:	40 93 90 00 	sts	0x0090, r20
				if (PIND & 1<< plus && flag && rpm < 450) {
    100a:	80 9b       	sbis	0x10, 0	; 16
    100c:	0c c0       	rjmp	.+24     	; 0x1026 <main+0x7c2>
    100e:	80 91 64 00 	lds	r24, 0x0064
    1012:	88 23       	and	r24, r24
    1014:	41 f0       	breq	.+16     	; 0x1026 <main+0x7c2>
    1016:	80 91 75 00 	lds	r24, 0x0075
    101a:	90 91 76 00 	lds	r25, 0x0076
    101e:	82 3c       	cpi	r24, 0xC2	; 194
    1020:	91 40       	sbci	r25, 0x01	; 1
    1022:	08 f4       	brcc	.+2      	; 0x1026 <main+0x7c2>
    1024:	49 c2       	rjmp	.+1170   	; 0x14b8 <main+0xc54>
					rpm += 10;
					flag = 0;
				}
				if (PIND & 1<< minus && flag && rpm > 40) {
    1026:	81 9b       	sbis	0x10, 1	; 16
    1028:	0b c0       	rjmp	.+22     	; 0x1040 <main+0x7dc>
    102a:	80 91 64 00 	lds	r24, 0x0064
    102e:	88 23       	and	r24, r24
    1030:	39 f0       	breq	.+14     	; 0x1040 <main+0x7dc>
    1032:	80 91 75 00 	lds	r24, 0x0075
    1036:	90 91 76 00 	lds	r25, 0x0076
    103a:	89 97       	sbiw	r24, 0x29	; 41
    103c:	08 f0       	brcs	.+2      	; 0x1040 <main+0x7dc>
    103e:	48 c2       	rjmp	.+1168   	; 0x14d0 <main+0xc6c>
					rpm -= 10;
					flag = 0;
				}
				up = rpm;
    1040:	80 91 75 00 	lds	r24, 0x0075
    1044:	90 91 76 00 	lds	r25, 0x0076
    1048:	90 93 8b 00 	sts	0x008B, r25
    104c:	80 93 8a 00 	sts	0x008A, r24
				
				
				
				OCR2 = 9375/rpm - 1 + accel2;
    1050:	60 91 75 00 	lds	r22, 0x0075
    1054:	70 91 76 00 	lds	r23, 0x0076
    1058:	20 91 98 00 	lds	r18, 0x0098
    105c:	21 50       	subi	r18, 0x01	; 1
    105e:	ce 01       	movw	r24, r28
    1060:	a5 d2       	rcall	.+1354   	; 0x15ac <__udivmodhi4>
    1062:	26 0f       	add	r18, r22
    1064:	23 bd       	out	0x23, r18	; 35
				accel2 = accel22/16;
    1066:	80 91 73 00 	lds	r24, 0x0073
    106a:	90 91 74 00 	lds	r25, 0x0074
    106e:	92 95       	swap	r25
    1070:	82 95       	swap	r24
    1072:	8f 70       	andi	r24, 0x0F	; 15
    1074:	89 27       	eor	r24, r25
    1076:	9f 70       	andi	r25, 0x0F	; 15
    1078:	89 27       	eor	r24, r25
    107a:	80 93 98 00 	sts	0x0098, r24
				
				
				switch (r) {
    107e:	80 91 78 00 	lds	r24, 0x0078
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	91 05       	cpc	r25, r1
    1088:	08 f0       	brcs	.+2      	; 0x108c <main+0x828>
    108a:	a4 c0       	rjmp	.+328    	; 0x11d4 <main+0x970>
    108c:	85 5e       	subi	r24, 0xE5	; 229
    108e:	9f 4f       	sbci	r25, 0xFF	; 255
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	08 95       	ret
					case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
    1096:	a0 91 93 00 	lds	r26, 0x0093
    109a:	80 91 87 00 	lds	r24, 0x0087
    109e:	30 e2       	ldi	r19, 0x20	; 32
    10a0:	83 9f       	mul	r24, r19
    10a2:	c0 01       	movw	r24, r0
    10a4:	11 24       	eor	r1, r1
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	a8 59       	subi	r26, 0x98	; 152
    10aa:	bf 4f       	sbci	r27, 0xFF	; 255
    10ac:	9c 91       	ld	r25, X
    10ae:	89 2b       	or	r24, r25
    10b0:	8f b9       	out	0x0f, r24	; 15
    10b2:	77 9b       	sbis	0x0e, 7	; 14
    10b4:	fe cf       	rjmp	.-4      	; 0x10b2 <main+0x84e>
    10b6:	9f b8       	out	0x0f, r9	; 15
    10b8:	77 9b       	sbis	0x0e, 7	; 14
    10ba:	fe cf       	rjmp	.-4      	; 0x10b8 <main+0x854>
    10bc:	8b c0       	rjmp	.+278    	; 0x11d4 <main+0x970>
					case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
    10be:	a0 91 92 00 	lds	r26, 0x0092
    10c2:	80 91 86 00 	lds	r24, 0x0086
    10c6:	20 e2       	ldi	r18, 0x20	; 32
    10c8:	82 9f       	mul	r24, r18
    10ca:	c0 01       	movw	r24, r0
    10cc:	11 24       	eor	r1, r1
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	a8 59       	subi	r26, 0x98	; 152
    10d2:	bf 4f       	sbci	r27, 0xFF	; 255
    10d4:	9c 91       	ld	r25, X
    10d6:	89 2b       	or	r24, r25
    10d8:	8f b9       	out	0x0f, r24	; 15
    10da:	77 9b       	sbis	0x0e, 7	; 14
    10dc:	fe cf       	rjmp	.-4      	; 0x10da <main+0x876>
    10de:	af b8       	out	0x0f, r10	; 15
    10e0:	77 9b       	sbis	0x0e, 7	; 14
    10e2:	fe cf       	rjmp	.-4      	; 0x10e0 <main+0x87c>
    10e4:	77 c0       	rjmp	.+238    	; 0x11d4 <main+0x970>
					case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
    10e6:	a0 91 91 00 	lds	r26, 0x0091
    10ea:	80 91 85 00 	lds	r24, 0x0085
    10ee:	30 e2       	ldi	r19, 0x20	; 32
    10f0:	83 9f       	mul	r24, r19
    10f2:	c0 01       	movw	r24, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	a8 59       	subi	r26, 0x98	; 152
    10fa:	bf 4f       	sbci	r27, 0xFF	; 255
    10fc:	9c 91       	ld	r25, X
    10fe:	89 2b       	or	r24, r25
    1100:	8f b9       	out	0x0f, r24	; 15
    1102:	77 9b       	sbis	0x0e, 7	; 14
    1104:	fe cf       	rjmp	.-4      	; 0x1102 <main+0x89e>
    1106:	0f b9       	out	0x0f, r16	; 15
    1108:	77 9b       	sbis	0x0e, 7	; 14
    110a:	fe cf       	rjmp	.-4      	; 0x1108 <main+0x8a4>
    110c:	63 c0       	rjmp	.+198    	; 0x11d4 <main+0x970>
					case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
    110e:	a0 91 90 00 	lds	r26, 0x0090
    1112:	80 91 84 00 	lds	r24, 0x0084
    1116:	20 e2       	ldi	r18, 0x20	; 32
    1118:	82 9f       	mul	r24, r18
    111a:	c0 01       	movw	r24, r0
    111c:	11 24       	eor	r1, r1
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	a8 59       	subi	r26, 0x98	; 152
    1122:	bf 4f       	sbci	r27, 0xFF	; 255
    1124:	9c 91       	ld	r25, X
    1126:	89 2b       	or	r24, r25
    1128:	8f b9       	out	0x0f, r24	; 15
    112a:	77 9b       	sbis	0x0e, 7	; 14
    112c:	fe cf       	rjmp	.-4      	; 0x112a <main+0x8c6>
    112e:	ff b8       	out	0x0f, r15	; 15
    1130:	77 9b       	sbis	0x0e, 7	; 14
    1132:	fe cf       	rjmp	.-4      	; 0x1130 <main+0x8cc>
    1134:	4f c0       	rjmp	.+158    	; 0x11d4 <main+0x970>
					case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
    1136:	a0 91 8f 00 	lds	r26, 0x008F
    113a:	80 91 83 00 	lds	r24, 0x0083
    113e:	30 e2       	ldi	r19, 0x20	; 32
    1140:	83 9f       	mul	r24, r19
    1142:	c0 01       	movw	r24, r0
    1144:	11 24       	eor	r1, r1
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	a8 59       	subi	r26, 0x98	; 152
    114a:	bf 4f       	sbci	r27, 0xFF	; 255
    114c:	9c 91       	ld	r25, X
    114e:	89 2b       	or	r24, r25
    1150:	8f b9       	out	0x0f, r24	; 15
    1152:	77 9b       	sbis	0x0e, 7	; 14
    1154:	fe cf       	rjmp	.-4      	; 0x1152 <main+0x8ee>
    1156:	ef b8       	out	0x0f, r14	; 15
    1158:	77 9b       	sbis	0x0e, 7	; 14
    115a:	fe cf       	rjmp	.-4      	; 0x1158 <main+0x8f4>
    115c:	3b c0       	rjmp	.+118    	; 0x11d4 <main+0x970>
					case 5: SPDR = mass[r5] | dp5<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000100; while(!(SPSR & (1<<SPIF))); break;
    115e:	a0 91 8e 00 	lds	r26, 0x008E
    1162:	80 91 82 00 	lds	r24, 0x0082
    1166:	20 e2       	ldi	r18, 0x20	; 32
    1168:	82 9f       	mul	r24, r18
    116a:	c0 01       	movw	r24, r0
    116c:	11 24       	eor	r1, r1
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	a8 59       	subi	r26, 0x98	; 152
    1172:	bf 4f       	sbci	r27, 0xFF	; 255
    1174:	9c 91       	ld	r25, X
    1176:	89 2b       	or	r24, r25
    1178:	8f b9       	out	0x0f, r24	; 15
    117a:	77 9b       	sbis	0x0e, 7	; 14
    117c:	fe cf       	rjmp	.-4      	; 0x117a <main+0x916>
    117e:	df b8       	out	0x0f, r13	; 15
    1180:	77 9b       	sbis	0x0e, 7	; 14
    1182:	fe cf       	rjmp	.-4      	; 0x1180 <main+0x91c>
    1184:	27 c0       	rjmp	.+78     	; 0x11d4 <main+0x970>
					case 6: SPDR = mass[r6] | dp6<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00001000; while(!(SPSR & (1<<SPIF))); break;
    1186:	a0 91 8d 00 	lds	r26, 0x008D
    118a:	80 91 81 00 	lds	r24, 0x0081
    118e:	30 e2       	ldi	r19, 0x20	; 32
    1190:	83 9f       	mul	r24, r19
    1192:	c0 01       	movw	r24, r0
    1194:	11 24       	eor	r1, r1
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	a8 59       	subi	r26, 0x98	; 152
    119a:	bf 4f       	sbci	r27, 0xFF	; 255
    119c:	9c 91       	ld	r25, X
    119e:	89 2b       	or	r24, r25
    11a0:	8f b9       	out	0x0f, r24	; 15
    11a2:	77 9b       	sbis	0x0e, 7	; 14
    11a4:	fe cf       	rjmp	.-4      	; 0x11a2 <main+0x93e>
    11a6:	cf b8       	out	0x0f, r12	; 15
    11a8:	77 9b       	sbis	0x0e, 7	; 14
    11aa:	fe cf       	rjmp	.-4      	; 0x11a8 <main+0x944>
    11ac:	13 c0       	rjmp	.+38     	; 0x11d4 <main+0x970>
					case 7: SPDR = mass[r7] | dp7<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000001; while(!(SPSR & (1<<SPIF))); break;
    11ae:	a0 91 8c 00 	lds	r26, 0x008C
    11b2:	80 91 80 00 	lds	r24, 0x0080
    11b6:	20 e2       	ldi	r18, 0x20	; 32
    11b8:	82 9f       	mul	r24, r18
    11ba:	c0 01       	movw	r24, r0
    11bc:	11 24       	eor	r1, r1
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	a8 59       	subi	r26, 0x98	; 152
    11c2:	bf 4f       	sbci	r27, 0xFF	; 255
    11c4:	9c 91       	ld	r25, X
    11c6:	89 2b       	or	r24, r25
    11c8:	8f b9       	out	0x0f, r24	; 15
    11ca:	77 9b       	sbis	0x0e, 7	; 14
    11cc:	fe cf       	rjmp	.-4      	; 0x11ca <main+0x966>
    11ce:	bf b8       	out	0x0f, r11	; 15
    11d0:	77 9b       	sbis	0x0e, 7	; 14
    11d2:	fe cf       	rjmp	.-4      	; 0x11d0 <main+0x96c>
				}
				PORTB |= 1<<2;
    11d4:	c2 9a       	sbi	0x18, 2	; 24
				PORTB &= ~1<<2;
    11d6:	88 b3       	in	r24, 0x18	; 24
    11d8:	88 7f       	andi	r24, 0xF8	; 248
    11da:	88 bb       	out	0x18, r24	; 24
				
				SPDR = data_out;
    11dc:	80 91 66 00 	lds	r24, 0x0066
    11e0:	90 91 67 00 	lds	r25, 0x0067
    11e4:	8f b9       	out	0x0f, r24	; 15
				while(!(SPSR & (1<<SPIF)));
    11e6:	77 9b       	sbis	0x0e, 7	; 14
    11e8:	fe cf       	rjmp	.-4      	; 0x11e6 <main+0x982>
				PORTB |= 1<<1;
    11ea:	c1 9a       	sbi	0x18, 1	; 24
				PORTB &= ~1<<1;
    11ec:	88 b3       	in	r24, 0x18	; 24
    11ee:	8c 7f       	andi	r24, 0xFC	; 252
    11f0:	88 bb       	out	0x18, r24	; 24
				
				r++;
    11f2:	80 91 78 00 	lds	r24, 0x0078
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	80 93 78 00 	sts	0x0078, r24
				if (r > 7) r = 0;
    11fc:	80 91 78 00 	lds	r24, 0x0078
    1200:	88 30       	cpi	r24, 0x08	; 8
    1202:	08 f4       	brcc	.+2      	; 0x1206 <main+0x9a2>
    1204:	44 ce       	rjmp	.-888    	; 0xe8e <main+0x62a>
    1206:	10 92 78 00 	sts	0x0078, r1
    120a:	41 ce       	rjmp	.-894    	; 0xe8e <main+0x62a>
		


		
		switch (r) {
			case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
    120c:	e0 91 93 00 	lds	r30, 0x0093
    1210:	80 91 87 00 	lds	r24, 0x0087
    1214:	30 e2       	ldi	r19, 0x20	; 32
    1216:	83 9f       	mul	r24, r19
    1218:	c0 01       	movw	r24, r0
    121a:	11 24       	eor	r1, r1
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	e8 59       	subi	r30, 0x98	; 152
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	90 81       	ld	r25, Z
    1224:	89 2b       	or	r24, r25
    1226:	8f b9       	out	0x0f, r24	; 15
    1228:	77 9b       	sbis	0x0e, 7	; 14
    122a:	fe cf       	rjmp	.-4      	; 0x1228 <main+0x9c4>
    122c:	6f b8       	out	0x0f, r6	; 15
    122e:	77 9b       	sbis	0x0e, 7	; 14
    1230:	fe cf       	rjmp	.-4      	; 0x122e <main+0x9ca>
    1232:	8b c0       	rjmp	.+278    	; 0x134a <main+0xae6>
			case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
    1234:	e0 91 92 00 	lds	r30, 0x0092
    1238:	80 91 86 00 	lds	r24, 0x0086
    123c:	20 e2       	ldi	r18, 0x20	; 32
    123e:	82 9f       	mul	r24, r18
    1240:	c0 01       	movw	r24, r0
    1242:	11 24       	eor	r1, r1
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	e8 59       	subi	r30, 0x98	; 152
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	90 81       	ld	r25, Z
    124c:	89 2b       	or	r24, r25
    124e:	8f b9       	out	0x0f, r24	; 15
    1250:	77 9b       	sbis	0x0e, 7	; 14
    1252:	fe cf       	rjmp	.-4      	; 0x1250 <main+0x9ec>
    1254:	5f b8       	out	0x0f, r5	; 15
    1256:	77 9b       	sbis	0x0e, 7	; 14
    1258:	fe cf       	rjmp	.-4      	; 0x1256 <main+0x9f2>
    125a:	77 c0       	rjmp	.+238    	; 0x134a <main+0xae6>
			case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
    125c:	e0 91 91 00 	lds	r30, 0x0091
    1260:	80 91 85 00 	lds	r24, 0x0085
    1264:	30 e2       	ldi	r19, 0x20	; 32
    1266:	83 9f       	mul	r24, r19
    1268:	c0 01       	movw	r24, r0
    126a:	11 24       	eor	r1, r1
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	e8 59       	subi	r30, 0x98	; 152
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	90 81       	ld	r25, Z
    1274:	89 2b       	or	r24, r25
    1276:	8f b9       	out	0x0f, r24	; 15
    1278:	77 9b       	sbis	0x0e, 7	; 14
    127a:	fe cf       	rjmp	.-4      	; 0x1278 <main+0xa14>
    127c:	4f b8       	out	0x0f, r4	; 15
    127e:	77 9b       	sbis	0x0e, 7	; 14
    1280:	fe cf       	rjmp	.-4      	; 0x127e <main+0xa1a>
    1282:	63 c0       	rjmp	.+198    	; 0x134a <main+0xae6>
			case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
    1284:	e0 91 90 00 	lds	r30, 0x0090
    1288:	80 91 84 00 	lds	r24, 0x0084
    128c:	20 e2       	ldi	r18, 0x20	; 32
    128e:	82 9f       	mul	r24, r18
    1290:	c0 01       	movw	r24, r0
    1292:	11 24       	eor	r1, r1
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	e8 59       	subi	r30, 0x98	; 152
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	90 81       	ld	r25, Z
    129c:	89 2b       	or	r24, r25
    129e:	8f b9       	out	0x0f, r24	; 15
    12a0:	77 9b       	sbis	0x0e, 7	; 14
    12a2:	fe cf       	rjmp	.-4      	; 0x12a0 <main+0xa3c>
    12a4:	3f b8       	out	0x0f, r3	; 15
    12a6:	77 9b       	sbis	0x0e, 7	; 14
    12a8:	fe cf       	rjmp	.-4      	; 0x12a6 <main+0xa42>
    12aa:	4f c0       	rjmp	.+158    	; 0x134a <main+0xae6>
			case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
    12ac:	e0 91 8f 00 	lds	r30, 0x008F
    12b0:	80 91 83 00 	lds	r24, 0x0083
    12b4:	30 e2       	ldi	r19, 0x20	; 32
    12b6:	83 9f       	mul	r24, r19
    12b8:	c0 01       	movw	r24, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	e8 59       	subi	r30, 0x98	; 152
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	90 81       	ld	r25, Z
    12c4:	89 2b       	or	r24, r25
    12c6:	8f b9       	out	0x0f, r24	; 15
    12c8:	77 9b       	sbis	0x0e, 7	; 14
    12ca:	fe cf       	rjmp	.-4      	; 0x12c8 <main+0xa64>
    12cc:	2f b8       	out	0x0f, r2	; 15
    12ce:	77 9b       	sbis	0x0e, 7	; 14
    12d0:	fe cf       	rjmp	.-4      	; 0x12ce <main+0xa6a>
    12d2:	3b c0       	rjmp	.+118    	; 0x134a <main+0xae6>
			case 5: SPDR = mass[r5] | dp5<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000100; while(!(SPSR & (1<<SPIF))); break;
    12d4:	e0 91 8e 00 	lds	r30, 0x008E
    12d8:	80 91 82 00 	lds	r24, 0x0082
    12dc:	20 e2       	ldi	r18, 0x20	; 32
    12de:	82 9f       	mul	r24, r18
    12e0:	c0 01       	movw	r24, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	e8 59       	subi	r30, 0x98	; 152
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	90 81       	ld	r25, Z
    12ec:	89 2b       	or	r24, r25
    12ee:	8f b9       	out	0x0f, r24	; 15
    12f0:	77 9b       	sbis	0x0e, 7	; 14
    12f2:	fe cf       	rjmp	.-4      	; 0x12f0 <main+0xa8c>
    12f4:	9f b8       	out	0x0f, r9	; 15
    12f6:	77 9b       	sbis	0x0e, 7	; 14
    12f8:	fe cf       	rjmp	.-4      	; 0x12f6 <main+0xa92>
    12fa:	27 c0       	rjmp	.+78     	; 0x134a <main+0xae6>
			case 6: SPDR = mass[r6] | dp6<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00001000; while(!(SPSR & (1<<SPIF))); break;
    12fc:	e0 91 8d 00 	lds	r30, 0x008D
    1300:	80 91 81 00 	lds	r24, 0x0081
    1304:	30 e2       	ldi	r19, 0x20	; 32
    1306:	83 9f       	mul	r24, r19
    1308:	c0 01       	movw	r24, r0
    130a:	11 24       	eor	r1, r1
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	e8 59       	subi	r30, 0x98	; 152
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	90 81       	ld	r25, Z
    1314:	89 2b       	or	r24, r25
    1316:	8f b9       	out	0x0f, r24	; 15
    1318:	77 9b       	sbis	0x0e, 7	; 14
    131a:	fe cf       	rjmp	.-4      	; 0x1318 <main+0xab4>
    131c:	af b8       	out	0x0f, r10	; 15
    131e:	77 9b       	sbis	0x0e, 7	; 14
    1320:	fe cf       	rjmp	.-4      	; 0x131e <main+0xaba>
    1322:	13 c0       	rjmp	.+38     	; 0x134a <main+0xae6>
			case 7: SPDR = mass[r7] | dp7<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000001; while(!(SPSR & (1<<SPIF))); break;
    1324:	e0 91 8c 00 	lds	r30, 0x008C
    1328:	80 91 80 00 	lds	r24, 0x0080
    132c:	20 e2       	ldi	r18, 0x20	; 32
    132e:	82 9f       	mul	r24, r18
    1330:	c0 01       	movw	r24, r0
    1332:	11 24       	eor	r1, r1
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	e8 59       	subi	r30, 0x98	; 152
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	90 81       	ld	r25, Z
    133c:	89 2b       	or	r24, r25
    133e:	8f b9       	out	0x0f, r24	; 15
    1340:	77 9b       	sbis	0x0e, 7	; 14
    1342:	fe cf       	rjmp	.-4      	; 0x1340 <main+0xadc>
    1344:	cf b8       	out	0x0f, r12	; 15
    1346:	77 9b       	sbis	0x0e, 7	; 14
    1348:	fe cf       	rjmp	.-4      	; 0x1346 <main+0xae2>
		}
		PORTB |= 1<<2;
    134a:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~1<<2;
    134c:	88 b3       	in	r24, 0x18	; 24
    134e:	88 7f       	andi	r24, 0xF8	; 248
    1350:	88 bb       	out	0x18, r24	; 24
		
		SPDR = data_out;
    1352:	80 91 66 00 	lds	r24, 0x0066
    1356:	90 91 67 00 	lds	r25, 0x0067
    135a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
    135c:	77 9b       	sbis	0x0e, 7	; 14
    135e:	fe cf       	rjmp	.-4      	; 0x135c <main+0xaf8>
		PORTB |= 1<<1;
    1360:	c1 9a       	sbi	0x18, 1	; 24
		PORTB &= ~1<<1;
    1362:	88 b3       	in	r24, 0x18	; 24
    1364:	8c 7f       	andi	r24, 0xFC	; 252
    1366:	88 bb       	out	0x18, r24	; 24
		
		r++;
    1368:	80 91 78 00 	lds	r24, 0x0078
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	80 93 78 00 	sts	0x0078, r24
		if (r > 7) r = 0;
    1372:	80 91 78 00 	lds	r24, 0x0078
    1376:	88 30       	cpi	r24, 0x08	; 8
    1378:	08 f4       	brcc	.+2      	; 0x137c <main+0xb18>
    137a:	c1 ca       	rjmp	.-2686   	; 0x8fe <main+0x9a>
    137c:	10 92 78 00 	sts	0x0078, r1
    1380:	be ca       	rjmp	.-2692   	; 0x8fe <main+0x9a>
			case 0b00001000: rpm = up = rpm; dp1 = 0; break;
		}

		
		if (PIND & 1<<plus && flag) {
			switch (mode) {
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	09 f4       	brne	.+2      	; 0x1388 <main+0xb24>
    1386:	a8 cc       	rjmp	.-1712   	; 0xcd8 <main+0x474>
    1388:	20 f4       	brcc	.+8      	; 0x1392 <main+0xb2e>
    138a:	21 30       	cpi	r18, 0x01	; 1
    138c:	09 f4       	brne	.+2      	; 0x1390 <main+0xb2c>
    138e:	8d cc       	rjmp	.-1766   	; 0xcaa <main+0x446>
    1390:	e2 cc       	rjmp	.-1596   	; 0xd56 <main+0x4f2>
    1392:	24 30       	cpi	r18, 0x04	; 4
    1394:	09 f4       	brne	.+2      	; 0x1398 <main+0xb34>
    1396:	b7 cc       	rjmp	.-1682   	; 0xd06 <main+0x4a2>
    1398:	28 30       	cpi	r18, 0x08	; 8
    139a:	09 f4       	brne	.+2      	; 0x139e <main+0xb3a>
    139c:	cb cc       	rjmp	.-1642   	; 0xd34 <main+0x4d0>
    139e:	db cc       	rjmp	.-1610   	; 0xd56 <main+0x4f2>
			flag = 0;
		}
		
		
		if (PIND & 1<<minus && flag) {
			switch (mode) {
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <main+0xb42>
    13a4:	f8 cc       	rjmp	.-1552   	; 0xd96 <main+0x532>
    13a6:	20 f4       	brcc	.+8      	; 0x13b0 <main+0xb4c>
    13a8:	21 30       	cpi	r18, 0x01	; 1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <main+0xb4a>
    13ac:	dd cc       	rjmp	.-1606   	; 0xd68 <main+0x504>
    13ae:	32 cd       	rjmp	.-1436   	; 0xe14 <main+0x5b0>
    13b0:	24 30       	cpi	r18, 0x04	; 4
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <main+0xb52>
    13b4:	07 cd       	rjmp	.-1522   	; 0xdc4 <main+0x560>
    13b6:	28 30       	cpi	r18, 0x08	; 8
    13b8:	09 f4       	brne	.+2      	; 0x13bc <main+0xb58>
    13ba:	1b cd       	rjmp	.-1482   	; 0xdf2 <main+0x58e>
    13bc:	2b cd       	rjmp	.-1450   	; 0xe14 <main+0x5b0>
			flag = 0;
		}
		
		
		if (PIND & 1<<enter && flag) {
			mode <<= 1;
    13be:	22 0f       	add	r18, r18
    13c0:	20 93 61 00 	sts	0x0061, r18
			flag = 0;
    13c4:	10 92 64 00 	sts	0x0064, r1
    13c8:	2d cd       	rjmp	.-1446   	; 0xe24 <main+0x5c0>
			mode = 0b00000001;
		}
		
		
		if (PIND & 1<< razryad && flag) {
			if (k == 1) k = 1000;
    13ca:	80 91 62 00 	lds	r24, 0x0062
    13ce:	90 91 63 00 	lds	r25, 0x0063
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <main+0xb74>
    13d6:	37 cd       	rjmp	.-1426   	; 0xe46 <main+0x5e2>
    13d8:	32 cd       	rjmp	.-1436   	; 0xe3e <main+0x5da>
			flag = 0;
		}
		
		
		if (PIND & 1<< dir_button && flag) {
			dir = !dir;
    13da:	80 91 79 00 	lds	r24, 0x0079
    13de:	8c 25       	eor	r24, r12
    13e0:	80 93 79 00 	sts	0x0079, r24
			flag = 0;
    13e4:	10 92 64 00 	sts	0x0064, r1
    13e8:	47 cd       	rjmp	.-1394   	; 0xe78 <main+0x614>
		}
		
		if (PIND & 1<<play && flag) {
			flag = 0;
    13ea:	10 92 64 00 	sts	0x0064, r1
			dp1 = 0;
    13ee:	10 92 86 00 	sts	0x0086, r1
			data_out = 0b01000000 | 1<<(dir+4);
    13f2:	20 91 79 00 	lds	r18, 0x0079
    13f6:	2c 5f       	subi	r18, 0xFC	; 252
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <main+0xb9e>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	2a 95       	dec	r18
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <main+0xb9a>
    1406:	80 64       	ori	r24, 0x40	; 64
    1408:	90 93 67 00 	sts	0x0067, r25
    140c:	80 93 66 00 	sts	0x0066, r24
			work();
    1410:	3e d6       	rcall	.+3196   	; 0x208e <__data_load_end+0xa0a>
		}
		
		if (PIND & 1<<razryad && PIND & 1<<enter) {
    1412:	85 99       	sbic	0x10, 5	; 16
    1414:	39 cd       	rjmp	.-1422   	; 0xe88 <main+0x624>
		
		
		
		
		
		data_out = mode | 1<<7 | 1<<(dir+4);
    1416:	80 91 79 00 	lds	r24, 0x0079
    141a:	8c 5f       	subi	r24, 0xFC	; 252
    141c:	97 01       	movw	r18, r14
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <main+0xbc0>
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	8a 95       	dec	r24
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <main+0xbbc>
    1428:	c9 01       	movw	r24, r18
    142a:	20 91 61 00 	lds	r18, 0x0061
    142e:	20 68       	ori	r18, 0x80	; 128
    1430:	82 2b       	or	r24, r18
    1432:	90 93 67 00 	sts	0x0067, r25
    1436:	80 93 66 00 	sts	0x0066, r24
		


		
		switch (r) {
    143a:	80 91 78 00 	lds	r24, 0x0078
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	88 30       	cpi	r24, 0x08	; 8
    1442:	91 05       	cpc	r25, r1
    1444:	08 f0       	brcs	.+2      	; 0x1448 <main+0xbe4>
    1446:	81 cf       	rjmp	.-254    	; 0x134a <main+0xae6>
    1448:	fc 01       	movw	r30, r24
    144a:	ed 5d       	subi	r30, 0xDD	; 221
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	09 94       	ijmp
			data_out = 0b01000000 | 1<<(dir+4);
			work();
		}
		
		if (PIND & 1<<razryad && PIND & 1<<enter) {
			r4 = r5 = r6 = r7 = 10;
    1450:	8a e0       	ldi	r24, 0x0A	; 10
    1452:	80 93 8c 00 	sts	0x008C, r24
    1456:	80 93 8d 00 	sts	0x008D, r24
    145a:	80 93 8e 00 	sts	0x008E, r24
    145e:	80 93 8f 00 	sts	0x008F, r24
			data_out = 0;
    1462:	10 92 67 00 	sts	0x0067, r1
    1466:	10 92 66 00 	sts	0x0066, r1
			TIMSK |= 1<<7;
    146a:	89 b7       	in	r24, 0x39	; 57
    146c:	80 68       	ori	r24, 0x80	; 128
    146e:	89 bf       	out	0x39, r24	; 57
			PORTC &= ~(1<<en1);
    1470:	aa 98       	cbi	0x15, 2	; 21
			accel22 = 4000;
    1472:	80 ea       	ldi	r24, 0xA0	; 160
    1474:	9f e0       	ldi	r25, 0x0F	; 15
    1476:	90 93 74 00 	sts	0x0074, r25
    147a:	80 93 73 00 	sts	0x0073, r24
			dp1 = 0;
    147e:	10 92 86 00 	sts	0x0086, r1
			while (1) {
				r0 = up/1000;
				r1 = up%1000/100;
    1482:	e8 ee       	ldi	r30, 0xE8	; 232
    1484:	f3 e0       	ldi	r31, 0x03	; 3
				r2 = up%1000%100/10;
    1486:	14 e6       	ldi	r17, 0x64	; 100
				}
				up = rpm;
				
				
				
				OCR2 = 9375/rpm - 1 + accel2;
    1488:	cf e9       	ldi	r28, 0x9F	; 159
    148a:	d4 e2       	ldi	r29, 0x24	; 36
					case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
					case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
					case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
					case 5: SPDR = mass[r5] | dp5<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000100; while(!(SPSR & (1<<SPIF))); break;
					case 6: SPDR = mass[r6] | dp6<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00001000; while(!(SPSR & (1<<SPIF))); break;
					case 7: SPDR = mass[r7] | dp7<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000001; while(!(SPSR & (1<<SPIF))); break;
    148c:	bb 24       	eor	r11, r11
    148e:	b3 94       	inc	r11
					case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
					case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
					case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
					case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
					case 5: SPDR = mass[r5] | dp5<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000100; while(!(SPSR & (1<<SPIF))); break;
					case 6: SPDR = mass[r6] | dp6<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00001000; while(!(SPSR & (1<<SPIF))); break;
    1490:	68 94       	set
    1492:	cc 24       	eor	r12, r12
    1494:	c3 f8       	bld	r12, 3
					case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
					case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
					case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
					case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
					case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
					case 5: SPDR = mass[r5] | dp5<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000100; while(!(SPSR & (1<<SPIF))); break;
    1496:	68 94       	set
    1498:	dd 24       	eor	r13, r13
    149a:	d2 f8       	bld	r13, 2
				switch (r) {
					case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
					case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
					case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
					case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
					case 4: SPDR = mass[r4] | dp4<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
    149c:	68 94       	set
    149e:	ee 24       	eor	r14, r14
    14a0:	e1 f8       	bld	r14, 1
				
				switch (r) {
					case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
					case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
					case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
					case 3: SPDR = mass[r3] | dp3<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
    14a2:	68 94       	set
    14a4:	ff 24       	eor	r15, r15
    14a6:	f4 f8       	bld	r15, 4
				
				
				switch (r) {
					case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
					case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
					case 2: SPDR = mass[r2] | dp2<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
    14a8:	00 e2       	ldi	r16, 0x20	; 32
				accel2 = accel22/16;
				
				
				switch (r) {
					case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
					case 1: SPDR = mass[r1] | dp1<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
    14aa:	68 94       	set
    14ac:	aa 24       	eor	r10, r10
    14ae:	a6 f8       	bld	r10, 6
				OCR2 = 9375/rpm - 1 + accel2;
				accel2 = accel22/16;
				
				
				switch (r) {
					case 0: SPDR = mass[r0] | dp0<<5; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
    14b0:	68 94       	set
    14b2:	99 24       	eor	r9, r9
    14b4:	97 f8       	bld	r9, 7
    14b6:	eb cc       	rjmp	.-1578   	; 0xe8e <main+0x62a>
				r0 = up/1000;
				r1 = up%1000/100;
				r2 = up%1000%100/10;
				r3 = up%1000%100%10;
				if (PIND & 1<< plus && flag && rpm < 450) {
					rpm += 10;
    14b8:	80 91 75 00 	lds	r24, 0x0075
    14bc:	90 91 76 00 	lds	r25, 0x0076
    14c0:	0a 96       	adiw	r24, 0x0a	; 10
    14c2:	90 93 76 00 	sts	0x0076, r25
    14c6:	80 93 75 00 	sts	0x0075, r24
					flag = 0;
    14ca:	10 92 64 00 	sts	0x0064, r1
    14ce:	ab cd       	rjmp	.-1194   	; 0x1026 <main+0x7c2>
				}
				if (PIND & 1<< minus && flag && rpm > 40) {
					rpm -= 10;
    14d0:	80 91 75 00 	lds	r24, 0x0075
    14d4:	90 91 76 00 	lds	r25, 0x0076
    14d8:	0a 97       	sbiw	r24, 0x0a	; 10
    14da:	90 93 76 00 	sts	0x0076, r25
    14de:	80 93 75 00 	sts	0x0075, r24
					flag = 0;
    14e2:	10 92 64 00 	sts	0x0064, r1
    14e6:	ac cd       	rjmp	.-1192   	; 0x1040 <main+0x7dc>

000014e8 <__vector_9>:
		
	}
}


ISR (TIMER0_OVF_vect) {
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	8f 93       	push	r24
	if (PIND == 0) flag = 1;
    14f4:	80 b3       	in	r24, 0x10	; 16
    14f6:	81 11       	cpse	r24, r1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <__vector_9+0x18>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	80 93 64 00 	sts	0x0064, r24
}
    1500:	8f 91       	pop	r24
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <__vector_6>:

ISR (TIMER1_COMPA_vect) {
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
	PORTC ^= 1<<step2;
    151a:	95 b3       	in	r25, 0x15	; 21
    151c:	80 e1       	ldi	r24, 0x10	; 16
    151e:	89 27       	eor	r24, r25
    1520:	85 bb       	out	0x15, r24	; 21
}
    1522:	9f 91       	pop	r25
    1524:	8f 91       	pop	r24
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <__vector_3>:

ISR (TIMER2_COMP_vect) {
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
	PORTC^= 1<<step1;
    1542:	95 b3       	in	r25, 0x15	; 21
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	89 27       	eor	r24, r25
    1548:	85 bb       	out	0x15, r24	; 21
	if (accel22 == 0) accel22 = 1;
    154a:	80 91 73 00 	lds	r24, 0x0073
    154e:	90 91 74 00 	lds	r25, 0x0074
    1552:	89 2b       	or	r24, r25
    1554:	31 f4       	brne	.+12     	; 0x1562 <__vector_3+0x32>
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	90 93 74 00 	sts	0x0074, r25
    155e:	80 93 73 00 	sts	0x0073, r24
	accel22 = accel22 - 1;
    1562:	80 91 73 00 	lds	r24, 0x0073
    1566:	90 91 74 00 	lds	r25, 0x0074
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	90 93 74 00 	sts	0x0074, r25
    1570:	80 93 73 00 	sts	0x0073, r24
	nnow++;
    1574:	80 91 7c 00 	lds	r24, 0x007C
    1578:	90 91 7d 00 	lds	r25, 0x007D
    157c:	a0 91 7e 00 	lds	r26, 0x007E
    1580:	b0 91 7f 00 	lds	r27, 0x007F
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	a1 1d       	adc	r26, r1
    1588:	b1 1d       	adc	r27, r1
    158a:	80 93 7c 00 	sts	0x007C, r24
    158e:	90 93 7d 00 	sts	0x007D, r25
    1592:	a0 93 7e 00 	sts	0x007E, r26
    1596:	b0 93 7f 00 	sts	0x007F, r27
	
    159a:	bf 91       	pop	r27
    159c:	af 91       	pop	r26
    159e:	9f 91       	pop	r25
    15a0:	8f 91       	pop	r24
    15a2:	0f 90       	pop	r0
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	0f 90       	pop	r0
    15a8:	1f 90       	pop	r1
    15aa:	18 95       	reti

000015ac <__udivmodhi4>:
    15ac:	aa 1b       	sub	r26, r26
    15ae:	bb 1b       	sub	r27, r27
    15b0:	51 e1       	ldi	r21, 0x11	; 17
    15b2:	07 c0       	rjmp	.+14     	; 0x15c2 <__udivmodhi4_ep>

000015b4 <__udivmodhi4_loop>:
    15b4:	aa 1f       	adc	r26, r26
    15b6:	bb 1f       	adc	r27, r27
    15b8:	a6 17       	cp	r26, r22
    15ba:	b7 07       	cpc	r27, r23
    15bc:	10 f0       	brcs	.+4      	; 0x15c2 <__udivmodhi4_ep>
    15be:	a6 1b       	sub	r26, r22
    15c0:	b7 0b       	sbc	r27, r23

000015c2 <__udivmodhi4_ep>:
    15c2:	88 1f       	adc	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	5a 95       	dec	r21
    15c8:	a9 f7       	brne	.-22     	; 0x15b4 <__udivmodhi4_loop>
    15ca:	80 95       	com	r24
    15cc:	90 95       	com	r25
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	08 95       	ret

000015d4 <__udivmodsi4>:
    15d4:	a1 e2       	ldi	r26, 0x21	; 33
    15d6:	1a 2e       	mov	r1, r26
    15d8:	aa 1b       	sub	r26, r26
    15da:	bb 1b       	sub	r27, r27
    15dc:	fd 01       	movw	r30, r26
    15de:	0d c0       	rjmp	.+26     	; 0x15fa <__udivmodsi4_ep>

000015e0 <__udivmodsi4_loop>:
    15e0:	aa 1f       	adc	r26, r26
    15e2:	bb 1f       	adc	r27, r27
    15e4:	ee 1f       	adc	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	a2 17       	cp	r26, r18
    15ea:	b3 07       	cpc	r27, r19
    15ec:	e4 07       	cpc	r30, r20
    15ee:	f5 07       	cpc	r31, r21
    15f0:	20 f0       	brcs	.+8      	; 0x15fa <__udivmodsi4_ep>
    15f2:	a2 1b       	sub	r26, r18
    15f4:	b3 0b       	sbc	r27, r19
    15f6:	e4 0b       	sbc	r30, r20
    15f8:	f5 0b       	sbc	r31, r21

000015fa <__udivmodsi4_ep>:
    15fa:	66 1f       	adc	r22, r22
    15fc:	77 1f       	adc	r23, r23
    15fe:	88 1f       	adc	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	1a 94       	dec	r1
    1604:	69 f7       	brne	.-38     	; 0x15e0 <__udivmodsi4_loop>
    1606:	60 95       	com	r22
    1608:	70 95       	com	r23
    160a:	80 95       	com	r24
    160c:	90 95       	com	r25
    160e:	9b 01       	movw	r18, r22
    1610:	ac 01       	movw	r20, r24
    1612:	bd 01       	movw	r22, r26
    1614:	cf 01       	movw	r24, r30
    1616:	08 95       	ret

00001618 <__divmodsi4>:
    1618:	05 2e       	mov	r0, r21
    161a:	97 fb       	bst	r25, 7
    161c:	16 f4       	brtc	.+4      	; 0x1622 <__divmodsi4+0xa>
    161e:	00 94       	com	r0
    1620:	0f d0       	rcall	.+30     	; 0x1640 <__negsi2>
    1622:	57 fd       	sbrc	r21, 7
    1624:	05 d0       	rcall	.+10     	; 0x1630 <__divmodsi4_neg2>
    1626:	d6 df       	rcall	.-84     	; 0x15d4 <__udivmodsi4>
    1628:	07 fc       	sbrc	r0, 7
    162a:	02 d0       	rcall	.+4      	; 0x1630 <__divmodsi4_neg2>
    162c:	46 f4       	brtc	.+16     	; 0x163e <__divmodsi4_exit>
    162e:	08 c0       	rjmp	.+16     	; 0x1640 <__negsi2>

00001630 <__divmodsi4_neg2>:
    1630:	50 95       	com	r21
    1632:	40 95       	com	r20
    1634:	30 95       	com	r19
    1636:	21 95       	neg	r18
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    163a:	4f 4f       	sbci	r20, 0xFF	; 255
    163c:	5f 4f       	sbci	r21, 0xFF	; 255

0000163e <__divmodsi4_exit>:
    163e:	08 95       	ret

00001640 <__negsi2>:
    1640:	90 95       	com	r25
    1642:	80 95       	com	r24
    1644:	70 95       	com	r23
    1646:	61 95       	neg	r22
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	08 95       	ret

00001650 <__umulhisi3>:
    1650:	a2 9f       	mul	r26, r18
    1652:	b0 01       	movw	r22, r0
    1654:	b3 9f       	mul	r27, r19
    1656:	c0 01       	movw	r24, r0
    1658:	a3 9f       	mul	r26, r19
    165a:	01 d0       	rcall	.+2      	; 0x165e <__umulhisi3+0xe>
    165c:	b2 9f       	mul	r27, r18
    165e:	70 0d       	add	r23, r0
    1660:	81 1d       	adc	r24, r1
    1662:	11 24       	eor	r1, r1
    1664:	91 1d       	adc	r25, r1
    1666:	08 95       	ret

00001668 <_exit>:
    1668:	f8 94       	cli

0000166a <__stop_program>:
    166a:	ff cf       	rjmp	.-2      	; 0x166a <__stop_program>
