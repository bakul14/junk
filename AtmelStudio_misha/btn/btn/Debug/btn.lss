
btn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b8  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000007a  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b8  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000135  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000086  00000000  00000000  00000479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	2c c0       	rjmp	.+88     	; 0x8e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	uint16_t q = 0;
	DDRD |= 1<<0;
  38:	88 9a       	sbi	0x11, 0	; 17
	DDRD &= ~(1<<7);
  3a:	8f 98       	cbi	0x11, 7	; 17
	PORTD |= 1<<7;
  3c:	97 9a       	sbi	0x12, 7	; 18
	bool flag = 0;
  3e:	20 e0       	ldi	r18, 0x00	; 0
#define F_CPU 2000000
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	uint16_t q = 0;
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
			q = 0;
		}
		else {
		if(PIND & 1<<7 && flag == 1 && q>2000) flag = 0;
		else if (PIND & 1<<7) q++;
		else q = 0;
  44:	50 e0       	ldi	r21, 0x00	; 0
  46:	40 e0       	ldi	r20, 0x00	; 0
			PORTD ^= 1<<0;
			flag = 1;
			q = 0;
		}
		else {
		if(PIND & 1<<7 && flag == 1 && q>2000) flag = 0;
  48:	60 e0       	ldi	r22, 0x00	; 0
	PORTD |= 1<<7;
	bool flag = 0;
	while(1)
	{
		if (!(PIND & 1<<7) && flag == 0) {
			PORTD ^= 1<<0;
  4a:	31 e0       	ldi	r19, 0x01	; 1
  4c:	01 c0       	rjmp	.+2      	; 0x50 <__SREG__+0x11>
			flag = 1;
			q = 0;
		}
		else {
		if(PIND & 1<<7 && flag == 1 && q>2000) flag = 0;
  4e:	26 2f       	mov	r18, r22
	DDRD &= ~(1<<7);
	PORTD |= 1<<7;
	bool flag = 0;
	while(1)
	{
		if (!(PIND & 1<<7) && flag == 0) {
  50:	87 99       	sbic	0x10, 7	; 16
  52:	13 c0       	rjmp	.+38     	; 0x7a <__SREG__+0x3b>
  54:	21 11       	cpse	r18, r1
  56:	18 c0       	rjmp	.+48     	; 0x88 <__SREG__+0x49>
  58:	09 c0       	rjmp	.+18     	; 0x6c <__SREG__+0x2d>
			PORTD ^= 1<<0;
			flag = 1;
			q = 0;
		}
		else {
		if(PIND & 1<<7 && flag == 1 && q>2000) flag = 0;
  5a:	22 23       	and	r18, r18
  5c:	81 f0       	breq	.+32     	; 0x7e <__SREG__+0x3f>
  5e:	81 3d       	cpi	r24, 0xD1	; 209
  60:	77 e0       	ldi	r23, 0x07	; 7
  62:	97 07       	cpc	r25, r23
  64:	a0 f7       	brcc	.-24     	; 0x4e <__SREG__+0xf>
  66:	0b c0       	rjmp	.+22     	; 0x7e <__SREG__+0x3f>
		else if (PIND & 1<<7) q++;
  68:	01 96       	adiw	r24, 0x01	; 1
  6a:	f2 cf       	rjmp	.-28     	; 0x50 <__SREG__+0x11>
	PORTD |= 1<<7;
	bool flag = 0;
	while(1)
	{
		if (!(PIND & 1<<7) && flag == 0) {
			PORTD ^= 1<<0;
  6c:	82 b3       	in	r24, 0x12	; 18
  6e:	83 27       	eor	r24, r19
  70:	82 bb       	out	0x12, r24	; 18
			flag = 1;
  72:	23 2f       	mov	r18, r19
			q = 0;
  74:	85 2f       	mov	r24, r21
  76:	94 2f       	mov	r25, r20
  78:	eb cf       	rjmp	.-42     	; 0x50 <__SREG__+0x11>
		}
		else {
		if(PIND & 1<<7 && flag == 1 && q>2000) flag = 0;
  7a:	87 99       	sbic	0x10, 7	; 16
  7c:	ee cf       	rjmp	.-36     	; 0x5a <__SREG__+0x1b>
		else if (PIND & 1<<7) q++;
  7e:	87 99       	sbic	0x10, 7	; 16
  80:	f3 cf       	rjmp	.-26     	; 0x68 <__SREG__+0x29>
		else q = 0;
  82:	85 2f       	mov	r24, r21
  84:	94 2f       	mov	r25, r20
  86:	e4 cf       	rjmp	.-56     	; 0x50 <__SREG__+0x11>
			PORTD ^= 1<<0;
			flag = 1;
			q = 0;
		}
		else {
		if(PIND & 1<<7 && flag == 1 && q>2000) flag = 0;
  88:	87 9b       	sbis	0x10, 7	; 16
  8a:	f9 cf       	rjmp	.-14     	; 0x7e <__SREG__+0x3f>
  8c:	e8 cf       	rjmp	.-48     	; 0x5e <__SREG__+0x1f>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
