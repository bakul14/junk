
//------------------------------------------<                              axlib v1.1                               >----------------------------------------------------
//------------------------------------------<  Набор функций для работы с 7 сегментным инл=дикатором на 8 разрядов  >----------------------------------------------------
//------------------------------------------<             Кузнецов Алексей 2015 http://www.avrki.ru                 >----------------------------------------------------

#ifndef LED_7SEG_8DIG_H_
#define LED_7SEG_8DIG_H_

#if !defined(MAIN_INIT_H_)
#error "You must included (#include \"main_init.h\") befor use (#include <axlib/led_7seg_8dig.h>)."
#endif

//-------------------------------------------------------------------------
//							Подключаемые библиотеки
//-------------------------------------------------------------------------

#include <axlib/type_var.h>

//-------------------------------------------------------------------------
//							Макроопределения
//-------------------------------------------------------------------------

#define LED8_DIG	0
#define LED8_NUM	1


//-------------------------------------------------------------------------
//							Массив символов
//-------------------------------------------------------------------------

	BYTE led_font[10] = {
	0xC0,	// 0
	0xF9,	// 1
	0xA4,	// 2
	0xB0,	// 3
	0x99,	// 4
	0x92,	// 5
	0x82,	// 6
	0xF8,	// 7
	0x80,	// 8
	0x90	// 9
	};

//-------------------------------------------------------------------------
//							Функции
//-------------------------------------------------------------------------

// Инициализация регистра
void led8_init(void)
{

	DDR_LED8_CLK  |= (1 << PIN_LED8_CLK);
	DDR_LED8_DIG  |= (1 << PIN_LED8_DIG);
	DDR_LED8_NUM  |= (1 << PIN_LED8_NUM);
	DDR_LED8_DATA |= (1 << PIN_LED8_DATA);
	
	PORT_LED8_CLK  &= ~(1 << PIN_LED8_CLK);
	PORT_LED8_DIG  &= ~(1 << PIN_LED8_DIG);
	PORT_LED8_NUM  &= ~(1 << PIN_LED8_NUM);
	PORT_LED8_DATA &= ~(1 << PIN_LED8_DATA);
}


// Вункция вывода байта через регистр
void led8_byte(BYTE data, BYTE reg)
{
	for(BYTE i=0; i<8; i++)
	{
		if((data << i) & 0x80) // Выставляем по очереди, начиная со старшего, разряды
		{
			PORT_LED8_DATA |= (1 << PIN_LED8_DATA);	// Если 1
		}
		else
		{
			PORT_LED8_DATA &= ~(1 << PIN_LED8_DATA);	// Если 0
		}
		PORT_LED8_CLK |= (1 << PIN_LED8_CLK);	// Стробирование
		PORT_LED8_CLK &= ~(1 << PIN_LED8_CLK);
	}
	
	if(reg)
	{
		PORT_LED8_NUM |= (1 << PIN_LED8_NUM);	// Защелка цифры
		PORT_LED8_NUM &= ~(1 << PIN_LED8_NUM);
	}
	else
	{
		PORT_LED8_DIG |= (1 << PIN_LED8_DIG);	// Защелка разряда
		PORT_LED8_DIG &= ~(1 << PIN_LED8_DIG);
	}
}

#endif /* LED_7SEG_8DIG_H_ */