
kok.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000523  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a6  00000000  00000000  0000067f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a4  00000000  00000000  00000b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c9  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000043  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	21 c0       	rjmp	.+66     	; 0x78 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>


int main(void)
{
    DDRD |= 1<<0;
  38:	88 9a       	sbi	0x11, 0	; 17
	TCCR0 = 0b00000011;
  3a:	83 e0       	ldi	r24, 0x03	; 3
  3c:	83 bf       	out	0x33, r24	; 51
	PORTD |= 1<<0;
  3e:	90 9a       	sbi	0x12, 0	; 18
	TCNT0 = 0;
  40:	12 be       	out	0x32, r1	; 50
		if (TCNT0 == 10 && flag == 0) {
			PORTD &= 0<<0;
			TCNT0 = 0;
			flag = !flag;
		}
        if (TCNT0 == 40 && flag == 1) {
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	21 e0       	ldi	r18, 0x01	; 1
  46:	93 2f       	mov	r25, r19
	PORTD |= 1<<0;
	TCNT0 = 0;
	bool flag = 0;
    while (1) 
    {
		if (TCNT0 == 10 && flag == 0) {
  48:	82 b7       	in	r24, 0x32	; 50
  4a:	8a 30       	cpi	r24, 0x0A	; 10
  4c:	19 f4       	brne	.+6      	; 0x54 <__SREG__+0x15>
  4e:	91 11       	cpse	r25, r1
  50:	0e c0       	rjmp	.+28     	; 0x6e <__SREG__+0x2f>
  52:	06 c0       	rjmp	.+12     	; 0x60 <__SREG__+0x21>
			PORTD &= 0<<0;
			TCNT0 = 0;
			flag = !flag;
		}
        if (TCNT0 == 40 && flag == 1) {
  54:	82 b7       	in	r24, 0x32	; 50
  56:	88 32       	cpi	r24, 0x28	; 40
  58:	b9 f7       	brne	.-18     	; 0x48 <__SREG__+0x9>
  5a:	99 23       	and	r25, r25
  5c:	a9 f3       	breq	.-22     	; 0x48 <__SREG__+0x9>
  5e:	04 c0       	rjmp	.+8      	; 0x68 <__SREG__+0x29>
	TCNT0 = 0;
	bool flag = 0;
    while (1) 
    {
		if (TCNT0 == 10 && flag == 0) {
			PORTD &= 0<<0;
  60:	82 b3       	in	r24, 0x12	; 18
  62:	12 ba       	out	0x12, r1	; 18
			TCNT0 = 0;
  64:	12 be       	out	0x32, r1	; 50
  66:	03 c0       	rjmp	.+6      	; 0x6e <__SREG__+0x2f>
			flag = !flag;
		}
        if (TCNT0 == 40 && flag == 1) {
			PORTD |= 1<<0;
  68:	90 9a       	sbi	0x12, 0	; 18
			TCNT0 = 0;
  6a:	32 bf       	out	0x32, r19	; 50
  6c:	ec cf       	rjmp	.-40     	; 0x46 <__SREG__+0x7>
		if (TCNT0 == 10 && flag == 0) {
			PORTD &= 0<<0;
			TCNT0 = 0;
			flag = !flag;
		}
        if (TCNT0 == 40 && flag == 1) {
  6e:	82 b7       	in	r24, 0x32	; 50
  70:	88 32       	cpi	r24, 0x28	; 40
  72:	d1 f3       	breq	.-12     	; 0x68 <__SREG__+0x29>
  74:	92 2f       	mov	r25, r18
  76:	e8 cf       	rjmp	.-48     	; 0x48 <__SREG__+0x9>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>
