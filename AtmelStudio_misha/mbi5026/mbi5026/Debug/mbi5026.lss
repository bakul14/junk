
mbi5026.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000276  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006e  0080006e  00000318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000184  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a2  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000175  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000153  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007d  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
   2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
   4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
   8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
   a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
   e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
  10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
  12:	6a c0       	rjmp	.+212    	; 0xe8 <__vector_9>
  14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
  16:	2a c0       	rjmp	.+84     	; 0x6c <__bad_interrupt>
  18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>
  1a:	28 c0       	rjmp	.+80     	; 0x6c <__bad_interrupt>
  1c:	27 c0       	rjmp	.+78     	; 0x6c <__bad_interrupt>
  1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
  20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
  22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
  24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>
  26:	76 c0       	rjmp	.+236    	; 0x114 <__vector_9+0x2c>
  28:	83 c0       	rjmp	.+262    	; 0x130 <__vector_9+0x48>
  2a:	90 c0       	rjmp	.+288    	; 0x14c <__vector_9+0x64>
  2c:	9d c0       	rjmp	.+314    	; 0x168 <__vector_9+0x80>
  2e:	aa c0       	rjmp	.+340    	; 0x184 <__vector_9+0x9c>
  30:	b7 c0       	rjmp	.+366    	; 0x1a0 <__vector_9+0xb8>
  32:	c4 c0       	rjmp	.+392    	; 0x1bc <__vector_9+0xd4>
  34:	d1 c0       	rjmp	.+418    	; 0x1d8 <__vector_9+0xf0>

00000036 <__ctors_end>:
  36:	11 24       	eor	r1, r1
  38:	1f be       	out	0x3f, r1	; 63
  3a:	cf e5       	ldi	r28, 0x5F	; 95
  3c:	d4 e0       	ldi	r29, 0x04	; 4
  3e:	de bf       	out	0x3e, r29	; 62
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e6 e7       	ldi	r30, 0x76	; 118
  4a:	f2 e0       	ldi	r31, 0x02	; 2
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	ae 36       	cpi	r26, 0x6E	; 110
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	ae e6       	ldi	r26, 0x6E	; 110
  5c:	b0 e0       	ldi	r27, 0x00	; 0
  5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
  60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
  62:	a7 37       	cpi	r26, 0x77	; 119
  64:	b2 07       	cpc	r27, r18
  66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
  68:	02 d0       	rcall	.+4      	; 0x6e <main>
  6a:	03 c1       	rjmp	.+518    	; 0x272 <_exit>

0000006c <__bad_interrupt>:
  6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <main>:
int down = 2567;

uint8_t mass [10] = {0b11010111, 0b00010100, 0b11001101, 0b01011101, 0b00011110, 0b01011011, 0b11011011, 0b00010101, 0b11011111, 0b01011111};
int main(void)
{
	DDRB = 0xff;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
	SPCR = 0b01010000;
  72:	80 e5       	ldi	r24, 0x50	; 80
  74:	8d b9       	out	0x0d, r24	; 13
	
	SREG |= 1<<7;
  76:	8f b7       	in	r24, 0x3f	; 63
  78:	80 68       	ori	r24, 0x80	; 128
  7a:	8f bf       	out	0x3f, r24	; 63
	TCCR0 = 0b00000010;
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0b00000001;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	89 bf       	out	0x39, r24	; 57
	

	while(1)
	{
		r4 = down/1000;
  84:	80 91 6a 00 	lds	r24, 0x006A
  88:	90 91 6b 00 	lds	r25, 0x006B
  8c:	c8 ee       	ldi	r28, 0xE8	; 232
  8e:	d3 e0       	ldi	r29, 0x03	; 3
  90:	be 01       	movw	r22, r28
  92:	c8 d0       	rcall	.+400    	; 0x224 <__divmodhi4>
  94:	e6 2e       	mov	r14, r22
		r5 = down%1000/100;
  96:	e4 e6       	ldi	r30, 0x64	; 100
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	bf 01       	movw	r22, r30
  9c:	c3 d0       	rcall	.+390    	; 0x224 <__divmodhi4>
  9e:	f6 2e       	mov	r15, r22
		r6 = down%1000%100/10;
  a0:	2a e0       	ldi	r18, 0x0A	; 10
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	b9 01       	movw	r22, r18
  a6:	be d0       	rcall	.+380    	; 0x224 <__divmodhi4>
  a8:	06 2f       	mov	r16, r22
		r7 = down%1000%100%10;
  aa:	18 2f       	mov	r17, r24
		
		r0 = up/1000;
  ac:	80 91 6c 00 	lds	r24, 0x006C
  b0:	90 91 6d 00 	lds	r25, 0x006D
  b4:	be 01       	movw	r22, r28
  b6:	b6 d0       	rcall	.+364    	; 0x224 <__divmodhi4>
  b8:	c6 2f       	mov	r28, r22
		r1 = up%1000/100;
  ba:	bf 01       	movw	r22, r30
  bc:	b3 d0       	rcall	.+358    	; 0x224 <__divmodhi4>
  be:	46 2f       	mov	r20, r22
		r2 = up%1000%100/10;
  c0:	b9 01       	movw	r22, r18
  c2:	b0 d0       	rcall	.+352    	; 0x224 <__divmodhi4>
  c4:	96 2f       	mov	r25, r22
	TIMSK = 0b00000001;
	

	while(1)
	{
		r4 = down/1000;
  c6:	e0 92 71 00 	sts	0x0071, r14
		r5 = down%1000/100;
  ca:	f0 92 70 00 	sts	0x0070, r15
		r6 = down%1000%100/10;
  ce:	00 93 6f 00 	sts	0x006F, r16
		r7 = down%1000%100%10;
  d2:	10 93 6e 00 	sts	0x006E, r17
		
		r0 = up/1000;
  d6:	c0 93 75 00 	sts	0x0075, r28
		r1 = up%1000/100;
  da:	40 93 74 00 	sts	0x0074, r20
		r2 = up%1000%100/10;
  de:	90 93 73 00 	sts	0x0073, r25
		r3 = up%1000%100%10;
  e2:	80 93 72 00 	sts	0x0072, r24
  e6:	ef cf       	rjmp	.-34     	; 0xc6 <main+0x58>

000000e8 <__vector_9>:
	}
}

ISR (TIMER0_OVF_vect) {
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	switch (i) {
  fe:	80 91 76 00 	lds	r24, 0x0076
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	88 30       	cpi	r24, 0x08	; 8
 106:	91 05       	cpc	r25, r1
 108:	08 f0       	brcs	.+2      	; 0x10c <__vector_9+0x24>
 10a:	73 c0       	rjmp	.+230    	; 0x1f2 <__vector_9+0x10a>
 10c:	fc 01       	movw	r30, r24
 10e:	ed 5e       	subi	r30, 0xED	; 237
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	09 94       	ijmp
		case 0: SPDR = mass[r0]; while(!(SPSR & (1<<SPIF))); SPDR = 0b10000000; while(!(SPSR & (1<<SPIF))); break;
 114:	e0 91 75 00 	lds	r30, 0x0075
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e0 5a       	subi	r30, 0xA0	; 160
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 81       	ld	r24, Z
 120:	8f b9       	out	0x0f, r24	; 15
 122:	77 9b       	sbis	0x0e, 7	; 14
 124:	fe cf       	rjmp	.-4      	; 0x122 <__vector_9+0x3a>
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	8f b9       	out	0x0f, r24	; 15
 12a:	77 9b       	sbis	0x0e, 7	; 14
 12c:	fe cf       	rjmp	.-4      	; 0x12a <__vector_9+0x42>
 12e:	61 c0       	rjmp	.+194    	; 0x1f2 <__vector_9+0x10a>
		case 1: SPDR = mass[r1]; while(!(SPSR & (1<<SPIF))); SPDR = 0b01000000; while(!(SPSR & (1<<SPIF))); break;
 130:	e0 91 74 00 	lds	r30, 0x0074
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e0 5a       	subi	r30, 0xA0	; 160
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	80 81       	ld	r24, Z
 13c:	8f b9       	out	0x0f, r24	; 15
 13e:	77 9b       	sbis	0x0e, 7	; 14
 140:	fe cf       	rjmp	.-4      	; 0x13e <__vector_9+0x56>
 142:	80 e4       	ldi	r24, 0x40	; 64
 144:	8f b9       	out	0x0f, r24	; 15
 146:	77 9b       	sbis	0x0e, 7	; 14
 148:	fe cf       	rjmp	.-4      	; 0x146 <__vector_9+0x5e>
 14a:	53 c0       	rjmp	.+166    	; 0x1f2 <__vector_9+0x10a>
		case 2: SPDR = mass[r2]; while(!(SPSR & (1<<SPIF))); SPDR = 0b00100000; while(!(SPSR & (1<<SPIF))); break;
 14c:	e0 91 73 00 	lds	r30, 0x0073
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e0 5a       	subi	r30, 0xA0	; 160
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	80 81       	ld	r24, Z
 158:	8f b9       	out	0x0f, r24	; 15
 15a:	77 9b       	sbis	0x0e, 7	; 14
 15c:	fe cf       	rjmp	.-4      	; 0x15a <__vector_9+0x72>
 15e:	80 e2       	ldi	r24, 0x20	; 32
 160:	8f b9       	out	0x0f, r24	; 15
 162:	77 9b       	sbis	0x0e, 7	; 14
 164:	fe cf       	rjmp	.-4      	; 0x162 <__vector_9+0x7a>
 166:	45 c0       	rjmp	.+138    	; 0x1f2 <__vector_9+0x10a>
		case 3: SPDR = mass[r3]; while(!(SPSR & (1<<SPIF))); SPDR = 0b00010000; while(!(SPSR & (1<<SPIF))); break;
 168:	e0 91 72 00 	lds	r30, 0x0072
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e0 5a       	subi	r30, 0xA0	; 160
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	80 81       	ld	r24, Z
 174:	8f b9       	out	0x0f, r24	; 15
 176:	77 9b       	sbis	0x0e, 7	; 14
 178:	fe cf       	rjmp	.-4      	; 0x176 <__vector_9+0x8e>
 17a:	80 e1       	ldi	r24, 0x10	; 16
 17c:	8f b9       	out	0x0f, r24	; 15
 17e:	77 9b       	sbis	0x0e, 7	; 14
 180:	fe cf       	rjmp	.-4      	; 0x17e <__vector_9+0x96>
 182:	37 c0       	rjmp	.+110    	; 0x1f2 <__vector_9+0x10a>
		case 4: SPDR = mass[r4]; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000010; while(!(SPSR & (1<<SPIF))); break;
 184:	e0 91 71 00 	lds	r30, 0x0071
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e0 5a       	subi	r30, 0xA0	; 160
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	80 81       	ld	r24, Z
 190:	8f b9       	out	0x0f, r24	; 15
 192:	77 9b       	sbis	0x0e, 7	; 14
 194:	fe cf       	rjmp	.-4      	; 0x192 <__vector_9+0xaa>
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	8f b9       	out	0x0f, r24	; 15
 19a:	77 9b       	sbis	0x0e, 7	; 14
 19c:	fe cf       	rjmp	.-4      	; 0x19a <__vector_9+0xb2>
 19e:	29 c0       	rjmp	.+82     	; 0x1f2 <__vector_9+0x10a>
		case 5: SPDR = mass[r5]; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000100; while(!(SPSR & (1<<SPIF))); break;
 1a0:	e0 91 70 00 	lds	r30, 0x0070
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	e0 5a       	subi	r30, 0xA0	; 160
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
 1ac:	8f b9       	out	0x0f, r24	; 15
 1ae:	77 9b       	sbis	0x0e, 7	; 14
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <__vector_9+0xc6>
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	8f b9       	out	0x0f, r24	; 15
 1b6:	77 9b       	sbis	0x0e, 7	; 14
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <__vector_9+0xce>
 1ba:	1b c0       	rjmp	.+54     	; 0x1f2 <__vector_9+0x10a>
		case 6: SPDR = mass[r6]; while(!(SPSR & (1<<SPIF))); SPDR = 0b00001000; while(!(SPSR & (1<<SPIF))); break;
 1bc:	e0 91 6f 00 	lds	r30, 0x006F
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e0 5a       	subi	r30, 0xA0	; 160
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	8f b9       	out	0x0f, r24	; 15
 1ca:	77 9b       	sbis	0x0e, 7	; 14
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <__vector_9+0xe2>
 1ce:	88 e0       	ldi	r24, 0x08	; 8
 1d0:	8f b9       	out	0x0f, r24	; 15
 1d2:	77 9b       	sbis	0x0e, 7	; 14
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <__vector_9+0xea>
 1d6:	0d c0       	rjmp	.+26     	; 0x1f2 <__vector_9+0x10a>
		case 7: SPDR = mass[r7]; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000001; while(!(SPSR & (1<<SPIF))); break;
 1d8:	e0 91 6e 00 	lds	r30, 0x006E
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	e0 5a       	subi	r30, 0xA0	; 160
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	80 81       	ld	r24, Z
 1e4:	8f b9       	out	0x0f, r24	; 15
 1e6:	77 9b       	sbis	0x0e, 7	; 14
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <__vector_9+0xfe>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	8f b9       	out	0x0f, r24	; 15
 1ee:	77 9b       	sbis	0x0e, 7	; 14
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <__vector_9+0x106>
	}
	PORTB |= 1<<2;
 1f2:	c2 9a       	sbi	0x18, 2	; 24
	PORTB &= ~1<<2;
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	88 7f       	andi	r24, 0xF8	; 248
 1f8:	88 bb       	out	0x18, r24	; 24
	i++;
 1fa:	80 91 76 00 	lds	r24, 0x0076
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
	if (i > 7) i = 0;
 200:	88 30       	cpi	r24, 0x08	; 8
 202:	18 f4       	brcc	.+6      	; 0x20a <__vector_9+0x122>
		case 6: SPDR = mass[r6]; while(!(SPSR & (1<<SPIF))); SPDR = 0b00001000; while(!(SPSR & (1<<SPIF))); break;
		case 7: SPDR = mass[r7]; while(!(SPSR & (1<<SPIF))); SPDR = 0b00000001; while(!(SPSR & (1<<SPIF))); break;
	}
	PORTB |= 1<<2;
	PORTB &= ~1<<2;
	i++;
 204:	80 93 76 00 	sts	0x0076, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <__vector_9+0x126>
	if (i > 7) i = 0;
 20a:	10 92 76 00 	sts	0x0076, r1
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__divmodhi4>:
 224:	97 fb       	bst	r25, 7
 226:	07 2e       	mov	r0, r23
 228:	16 f4       	brtc	.+4      	; 0x22e <__divmodhi4+0xa>
 22a:	00 94       	com	r0
 22c:	06 d0       	rcall	.+12     	; 0x23a <__divmodhi4_neg1>
 22e:	77 fd       	sbrc	r23, 7
 230:	08 d0       	rcall	.+16     	; 0x242 <__divmodhi4_neg2>
 232:	0b d0       	rcall	.+22     	; 0x24a <__udivmodhi4>
 234:	07 fc       	sbrc	r0, 7
 236:	05 d0       	rcall	.+10     	; 0x242 <__divmodhi4_neg2>
 238:	3e f4       	brtc	.+14     	; 0x248 <__divmodhi4_exit>

0000023a <__divmodhi4_neg1>:
 23a:	90 95       	com	r25
 23c:	81 95       	neg	r24
 23e:	9f 4f       	sbci	r25, 0xFF	; 255
 240:	08 95       	ret

00000242 <__divmodhi4_neg2>:
 242:	70 95       	com	r23
 244:	61 95       	neg	r22
 246:	7f 4f       	sbci	r23, 0xFF	; 255

00000248 <__divmodhi4_exit>:
 248:	08 95       	ret

0000024a <__udivmodhi4>:
 24a:	aa 1b       	sub	r26, r26
 24c:	bb 1b       	sub	r27, r27
 24e:	51 e1       	ldi	r21, 0x11	; 17
 250:	07 c0       	rjmp	.+14     	; 0x260 <__udivmodhi4_ep>

00000252 <__udivmodhi4_loop>:
 252:	aa 1f       	adc	r26, r26
 254:	bb 1f       	adc	r27, r27
 256:	a6 17       	cp	r26, r22
 258:	b7 07       	cpc	r27, r23
 25a:	10 f0       	brcs	.+4      	; 0x260 <__udivmodhi4_ep>
 25c:	a6 1b       	sub	r26, r22
 25e:	b7 0b       	sbc	r27, r23

00000260 <__udivmodhi4_ep>:
 260:	88 1f       	adc	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	5a 95       	dec	r21
 266:	a9 f7       	brne	.-22     	; 0x252 <__udivmodhi4_loop>
 268:	80 95       	com	r24
 26a:	90 95       	com	r25
 26c:	bc 01       	movw	r22, r24
 26e:	cd 01       	movw	r24, r26
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
