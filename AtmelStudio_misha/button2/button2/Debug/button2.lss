
button2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000076  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000053f  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b5  00000000  00000000  00000697  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ac  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002dd  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007b  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1e c0       	rjmp	.+60     	; 0x72 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
int main(void)
{
	bool flag1 = 0;
	bool flag2 = 0;
	int a = 0;
	DDRD = 0b00000011;
  38:	83 e0       	ldi	r24, 0x03	; 3
  3a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000100;
  3c:	84 e0       	ldi	r24, 0x04	; 4
  3e:	82 bb       	out	0x12, r24	; 18
#include <util/delay.h>
int main(void)
{
	bool flag1 = 0;
	bool flag2 = 0;
	int a = 0;
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	bool flag1 = 0;
	bool flag2 = 0;
  44:	20 e0       	ldi	r18, 0x00	; 0
	PORTD = 0b00000100;
	while(1) {
		if (!(PIND&0b00000100) && flag1 == 0)
		{
			flag1 = 1;
			flag2 = !flag2;
  46:	31 e0       	ldi	r19, 0x01	; 1
			if (flag2 == 1 && a>1000) {
				PORTD = 0b00000101;
			}
			else {
				PORTD = 0b00000100;
  48:	54 e0       	ldi	r21, 0x04	; 4
		if (!(PIND&0b00000100) && flag1 == 0)
		{
			flag1 = 1;
			flag2 = !flag2;
			if (flag2 == 1 && a>1000) {
				PORTD = 0b00000101;
  4a:	65 e0       	ldi	r22, 0x05	; 5
	bool flag2 = 0;
	int a = 0;
	DDRD = 0b00000011;
	PORTD = 0b00000100;
	while(1) {
		if (!(PIND&0b00000100) && flag1 == 0)
  4c:	82 9b       	sbis	0x10, 2	; 16
  4e:	0c c0       	rjmp	.+24     	; 0x68 <__SREG__+0x29>
  50:	08 c0       	rjmp	.+16     	; 0x62 <__SREG__+0x23>
		{
			flag1 = 1;
			flag2 = !flag2;
			if (flag2 == 1 && a>1000) {
  52:	89 3e       	cpi	r24, 0xE9	; 233
  54:	43 e0       	ldi	r20, 0x03	; 3
  56:	94 07       	cpc	r25, r20
  58:	14 f0       	brlt	.+4      	; 0x5e <__SREG__+0x1f>
				PORTD = 0b00000101;
  5a:	62 bb       	out	0x12, r22	; 18
  5c:	08 c0       	rjmp	.+16     	; 0x6e <__SREG__+0x2f>
			}
			else {
				PORTD = 0b00000100;
  5e:	52 bb       	out	0x12, r21	; 18
  60:	06 c0       	rjmp	.+12     	; 0x6e <__SREG__+0x2f>
				
			}
			
		}
		if (!(PIND&0x00) && flag1 == 1) {
  62:	40 b3       	in	r20, 0x10	; 16
			flag1 = 0;
		}
		
		a++;
  64:	01 96       	adiw	r24, 0x01	; 1
	bool flag1 = 0;
	bool flag2 = 0;
	int a = 0;
	DDRD = 0b00000011;
	PORTD = 0b00000100;
	while(1) {
  66:	f2 cf       	rjmp	.-28     	; 0x4c <__SREG__+0xd>
		if (!(PIND&0b00000100) && flag1 == 0)
		{
			flag1 = 1;
			flag2 = !flag2;
  68:	23 27       	eor	r18, r19
			if (flag2 == 1 && a>1000) {
  6a:	99 f7       	brne	.-26     	; 0x52 <__SREG__+0x13>
  6c:	f8 cf       	rjmp	.-16     	; 0x5e <__SREG__+0x1f>
				PORTD = 0b00000100;
				
			}
			
		}
		if (!(PIND&0x00) && flag1 == 1) {
  6e:	40 b3       	in	r20, 0x10	; 16
  70:	f9 cf       	rjmp	.-14     	; 0x64 <__SREG__+0x25>

00000072 <_exit>:
  72:	f8 94       	cli

00000074 <__stop_program>:
  74:	ff cf       	rjmp	.-2      	; 0x74 <__stop_program>
