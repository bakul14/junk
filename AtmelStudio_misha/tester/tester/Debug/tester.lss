
tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000010e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000534  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b5  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000202  00000000  00000000  00000b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000029a  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	28 c0       	rjmp	.+80     	; 0x96 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include <avr/io.h>
uint8_t a = 0;
uint8_t i = 0;
int main(void)
{
	TCCR0 = 0b00000100;
  48:	84 e0       	ldi	r24, 0x04	; 4
  4a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  4c:	12 be       	out	0x32, r1	; 50
	DDRD = 0xff;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	81 bb       	out	0x11, r24	; 17
	DDRB |= (0<<0);
  52:	87 b3       	in	r24, 0x17	; 23
  54:	87 bb       	out	0x17, r24	; 23
	{
		
		if (PINB &= (1<<0)) {
			if (i == 0) {
				TCNT0 = 0;
				i = 1;
  56:	91 e0       	ldi	r25, 0x01	; 1
	DDRD = 0xff;
	DDRB |= (0<<0);
	while (1)
	{
		
		if (PINB &= (1<<0)) {
  58:	86 b3       	in	r24, 0x16	; 22
  5a:	81 70       	andi	r24, 0x01	; 1
  5c:	86 bb       	out	0x16, r24	; 22
  5e:	88 23       	and	r24, r24
  60:	41 f0       	breq	.+16     	; 0x72 <main+0x2a>
			if (i == 0) {
  62:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  66:	81 11       	cpse	r24, r1
  68:	0d c0       	rjmp	.+26     	; 0x84 <main+0x3c>
				TCNT0 = 0;
  6a:	12 be       	out	0x32, r1	; 50
				i = 1;
  6c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
  70:	09 c0       	rjmp	.+18     	; 0x84 <main+0x3c>
			}
		}
		
		else if (i==1) {
  72:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	29 f4       	brne	.+10     	; 0x84 <main+0x3c>
			i = 0;
  7a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			a = TCNT0;
  7e:	82 b7       	in	r24, 0x32	; 50
  80:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <a>
		}
		
		if (a>94) PORTD |= (1<<0);
  84:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <a>
  88:	8f 35       	cpi	r24, 0x5F	; 95
  8a:	10 f0       	brcs	.+4      	; 0x90 <main+0x48>
  8c:	90 9a       	sbi	0x12, 0	; 18
  8e:	e4 cf       	rjmp	.-56     	; 0x58 <main+0x10>
		else PORTD &= (0<<0);
  90:	82 b3       	in	r24, 0x12	; 18
  92:	12 ba       	out	0x12, r1	; 18
  94:	e1 cf       	rjmp	.-62     	; 0x58 <main+0x10>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
